[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Visualisation Guide",
    "section": "",
    "text": "The Ghana Statistical Service (GSS) produces census and survey reports per its mandates to provide comprehensive, reliable, quality, relevant, accurate and timely statistical information to guide national development as stipulated in Section 3 of the Statistical Service Act, 2019 (Act 1003).\nThis document is a guide for staff and collaborators that analyse data and write reports. Its use will ensure that all GSS publications conform with its professional standards. The contents include instructions on design, formatting, writing style and data visualisation.\nThe guide sets out a distinct style for reports from the Statistical Service. A consistent style of publishing reports is necessary to deliver this mandate. It will also support the institutional vision to be a trusted provider of official statistics.\n\nFunctions of Data\nData when ready for visualization can have the following functions as relation between variables\n\n  Compassion\n  Correlation\n  Distribution\n  Trend over time\n  Part of a whole\n  Geolocation\n\n\n\nNumber of variables\nData can be represented on large number of variables but for easy comprehension it is advised to present a maximum of five (5) variables or categories of variables at a time"
  },
  {
    "objectID": "brand_guide.html#cover-design",
    "href": "brand_guide.html#cover-design",
    "title": "Brand Guide",
    "section": "1.1 Cover Design",
    "text": "1.1 Cover Design\n\nThe front cover design of the report must have the logos, the name of the census/survey/routine or administrative data report, the volume number of the report if applicable, the name of the report, images which reflect the content of the report, and the month and year of publication.\nAll text on the cover page should be in UPPER CASE.\nThe back cover of the report should have the logo of the Statistical Service and the link to the GSS website.\n\n1.1.1 Use of Images\nThe use of images on the cover page must reflect the content and themes of the report.\nThe images should be semi-transparent and placed behind the title of the report underneath the logos and the name of the census/survey/routine or administrative data report.\n\n\n1.1.2 Use of logos\nThe cover design of the report should have Ghana’s Coat of Arms and the Statistical Service logo at the top of the page, with the Coat of Arms on the left, and the GSS logo on the right.\nWhen available, census/survey/routine or administrative data report logos must be placed between the Coat of Arms and the GSS logo as illustrated below.\n\nThe logos of the organisations involved, or programmes associated with the project should be placed at the bottom part of the cover page.\nWriters should ensure that the correct GSS logo (shown below) is used. Logos should not be resized or reshaped.\n\n\n\n1.1.3 Use of Colour\nThe recommended primary colours utilised in report designs should be inspired by the GSS logo.\n\n\n\n\n\n\n\nMinks~Hex: #210D69rgb: 210,210,210.\n\n\n\n\nHighlighter Lilac~Hex: #DB2E76rgb: 219,46,118.\n\n\n\n\nAllegiance~Hex: #586889rgb: 88,104,137.\n\n\n\n\nRich Green~Hex: #227C42rgb: 34,124,66."
  },
  {
    "objectID": "brand_guide.html#page-margins",
    "href": "brand_guide.html#page-margins",
    "title": "Brand Guide",
    "section": "1.2 Page Margins",
    "text": "1.2 Page Margins\nThe orientation of reports should be in portrait for pages with text and charts. Pages with wide tables can be presented in landscape orientation. The following page margins should be used:\n\n  Top: 2.00 cm and Bottom: 1.25 cm\n  Left: 2.30 cm and Right: 2.30 cm"
  },
  {
    "objectID": "brand_guide.html#header-and-footer",
    "href": "brand_guide.html#header-and-footer",
    "title": "Brand Guide",
    "section": "1.3 Header and Footer",
    "text": "1.3 Header and Footer\nPages should have a footer (The retrospect option for footers should be selected in Word).\nAll pages should be numbered. Page numbers should be placed on the bottom right corner of all pages. Page numbers should be in Century Gothic font size 11.\nA footer with the name GHANA STATISTICAL SERVICE (in upper case) placed on the bottom left corner of ALL pages. Report pages should not have headers."
  },
  {
    "objectID": "brand_guide.html#section-numbering",
    "href": "brand_guide.html#section-numbering",
    "title": "Brand Guide",
    "section": "1.4 Section numbering",
    "text": "1.4 Section numbering\nThe style for numbering chapters and sections within reports is shown below\n\n  Main chapter: 1\n  First level sub-section: 1.1\n  Second level sub-section: 1.1.1\n  Third level sub-section: 1.1.1.1"
  },
  {
    "objectID": "brand_guide.html#font",
    "href": "brand_guide.html#font",
    "title": "Brand Guide",
    "section": "1.5 Font",
    "text": "1.5 Font\n\n1.5.1 Size, Style, Colour and Capitalisation of Text\nThe font type Century Gothic (Body) should be used for text. Below are the font sizes, styles, colours, and indentation for the different levels of text:\nHeading one should be used for chapter or section headings numbered 1, 2, 3 etc. The subsequent heading styles should be used for the different sub-section levels.\nHEADING ONE (FONT SIZE 16; BOLD; UPPER CASE; BLACK)\nHeading Two (font size 14; bold; black; capitalise each word)\n\n  Heading Three (font size 13; bold; black; capitalise each word)\n\n  Heading Four (font size 12; bold; italics; black; capitalise each word)\nText within paragraph\n\n  (Font size 11; black; capitalise first word of sentence and proper nouns) \n\nFigure title\n\n  (font size 11; bold; small caps case; black, lighter 35%)\n\nTable title\n\n  (font size 11; bold; small caps case; black, lighter 35%)\n\nFOOTER\n\n  (FONT SIZE 9; UPPER CASE; WHITE, DARKER 50%) \n\n\n\n\n1.5.2 Tables\nThe font type Arial Narrow, font size 11 should be used for tables in the reports. In cases where tables have too many columns to fit the font size 11, a smaller size can be used.\n\n\n\n1.5.3 Charts\nCentury Gothic Bold, font size 11 should be used for the labels on graphs."
  },
  {
    "objectID": "brand_guide.html#paragraph-and-spacing",
    "href": "brand_guide.html#paragraph-and-spacing",
    "title": "Brand Guide",
    "section": "1.6 Paragraph and Spacing",
    "text": "1.6 Paragraph and Spacing\n\nText within paragraphs should be justified paragraphs. The following should be the line spacing used for text:\n\n  Paragraph spacing: Before: 12pt and After: 8pt\n  Line spacing: 1.15"
  },
  {
    "objectID": "brand_guide.html#bullets-and-numbering",
    "href": "brand_guide.html#bullets-and-numbering",
    "title": "Brand Guide",
    "section": "1.7 Bullets and Numbering",
    "text": "1.7 Bullets and Numbering\n\n\n  Round bullets (shown) should be used.\n\nFor lists with five or more items, numbers should be used instead of bullets.]\nWhen listing items ensure that there is consistency in the listed (verbs items as illustrated below:\n\n\n\n\n\n\n\n\n\nConsistent\nInconsistent\n\n\n\n\n\nTraining of field officers\n\n\nTrained field officers;\n\n\n\n\nValidation of data; and\n\n\nData validation; and\n\n\n\n\nWriting of reports.\n\n\nWriting of reports\n\n\n\n\nBullet items should be limited to single words, phrases or one sentence.\nWhen listing items that are complete sentences, each item should start with a capital letter and end with a full stop.\nWhen listing items that are single words or short phrases, items should start with small letters (except when the first word is a proper noun. The subsequent items should start with a small letter. Each item apart from the last should end with a semicolon. The penultimate item should have “and” or “or” after the semicolon. The last item should end with a full stop. An example is shown below:\n\n  Worked at least one hour in their paid job or business activity;\n  Engaged in a family business for payment in cash or in kind; or\n  Had a paid job or business activity but were on temporary absence."
  },
  {
    "objectID": "brand_guide.html#grammar-and-style",
    "href": "brand_guide.html#grammar-and-style",
    "title": "Brand Guide",
    "section": "2.1 Grammar and Style",
    "text": "2.1 Grammar and Style\n\nAll reports should be written in a formal professional style and free of grammatical and typographical errors. Writers are encouraged to utilise the word processing software or online editing tools to review their drafts before submission.\n\n\n2.1.1 Language\nGSS produces publications for diverse users including policy makers, civil society organisations, development partners and the private sector. As such reports should be written in clear non-technical language. Writers should use more common words and restrict usage of jargon to increase the readability of reports. When technical terms are used, they should be properly explained.\nReports should exclude:\n\n  contractions (e.g., can’t, don’t)\n  shorthand (e.g., &, cont’d,)\n  shortened word forms (e.g., org., dept.)\n  colloquial expressions (e.g., kids, folks, a bunch of, lots of)\n  idioms (e.g., deal with, on the flip side, boils down to)\n\nWriters should also avoid the use of local slang such as dumsor (persistent power outages). Local slang can be used when there is no formal alternative, but should be italicised example, trotro, or chop bar. Where there is a formal but less recognised alternative, the slang can be inserted in parentheses e.g., female porters (kayayei).\nReports should be written in the third person and avoid the use of personal pronouns such as, I and we.\n\n\n1.1.2 Clarity\nAs much as possible, reports should use the active voice (e.g., the Statistical Service conducted a three-day training for five enumerators) and avoid the passive voice (e.g., five enumerators were trained for three days).\nWriters should use specific figures and avoid subjective quantifiers such as many, a few, and most.\nWriters should similarly avoid using adverbs such as very, really, and quite as descriptive words and rather use one fitting word e.g., rapidly (very quickly), sizeable (really large), moderately (quite slowly).\n\n\n2.1.3 Verbosity\nWhile there are no strict limits to sentence lengths, writers are advised to have an average of 12 to 15 words per sentence in their reports.\nSimilarly, writers are advised to average three to five sentences per paragraph.\nWriters should aim for short succinct sentences. For instance, “The purpose of the pre-test was to assess the questionnaire” (10 words) can be “The pre-test assessed the questionnaire” (five words).\nPhrases should be replaced with single words whenever possible. Some suggestions are provided below: .\n\n\n\n\nOne word\nPhrase\n\n\n\n\nBecause\nAs a consequence of, due to the fact that\n\n\nFor\nFor the purpose of\n\n\nDespite, although\nIn spite of the fact that\n\n\nWithout\nIn the absence of\n\n\nWhile, during\nIn the course of\n\n\nExamine, explore, assess\nLook closely at, to find out whether\n\n\nDaily\nOn a daily basis\n\n\nComprises\nConsists of\n\n\nConsidering\nIn view of\n\n\nExcludes\nDoes not include\n\n\nEquivalent, similar\nThe same as\n\n\n\n\n\n2.1.4 Tenses\nVerb tenses should be consistent throughout. The recommended tenses are presented below:\n\n\n\n\n\n\n\n\nSection\nTense\nExample\n\n\n\n\nOverview including field operations, and other activities completed prior to report writing\nPast\nGSS developed two categories of instruments for the 2021 PHC: the listing form and the enumeration instruments.\n\n\nLiterature review\nPresent perfect\nBeing behind grade for age has been shown to negatively influence students’ academic and socio-emotional outcomes.\n\n\n\nPast\nAnarfi, Awusabo-Asare, and Nsowah-Nuamah (2000) estimated that there were 500,000 to 800,000 Ghanaians in Côte d’Ivoire in 1986.\n\n\nData and methodology\nPresent\nThe statistics presented in this thematic brief are generated from the 2021 PHC and on trends are complemented with data from the 2000 and 2010 censuses.\n\n\nFindings and highlights\nPresent\nThree in ten (30.2%) persons 6 years and older are not literate in any language.\n\n\n\nPast tense can be used for historical comparisons\nUrban and rural populations increased in all regions between 2010 and 2021 except Eastern and Ahafo regions where rural population decreased.\n\n\nConclusions\nPresent\nThe findings indicate that a substantial share of children is being deprived of their rights as outlined in the 1992 Constitution and the 1998 Children’s Act.\n\n\nRecommendations\nPresent\nGiven the observed protective influence of schooling on girls, it is particularly important for a coordinated effort to ensure that girls start and stay in school.\n\n\n\n\n\n2.1.5 Punctuation\nWhen a list within a sentence contains three or more items, a comma must be used after all items except the last one as shown below :\nThis report presents data on literacy, current school attendance, and educational attainment.\nWhen items in the list contain commas, semicolons should be used to separate items as shown below:\nThis publication targets Ministries, Departments, and Agencies (MDAs); Metropolitan, Municipal and District Assemblies (MMDAs); development partners; civil society organisations (CSOs); private sector; research and academia; and the public.\nOne space should separate sentences within a paragraph.\n\n\n\n2.1.6 Subject verb agreement\nInstitutions are singular e.g., GSS produces quality data.\nData should be considered a collective noun e.g., the data shows fertility has declined overtime.\nStatistics should be referred to in the plural e.g., statistics indicate that fertility has declined overtime.\n\n\n\n2.1.7 Capitalisation of Words\nCapital letters should be used for the first words in sentences and for proper nouns. Proper nouns refer to specific persons, or places. Common nouns, which are general, should not be capitalised. An example is shown below:\n“We are also indebted to the universities for their technical support, particularly the University of Ghana and the University of Cape Coast.”\nThe names of regions should be capitalised as such Greater Accra Region. When referring to two or more regions however, regions must not be capitalised. An example is shown below:\n“The Northern Region (14,031) has the highest number of girls aged 12 to 17 years who have ever been in union, followed distantly by the Ashanti (9,767) and Greater Accra regions (6,063).”\nCOVID-19 should be capitalised while coronavirus is written in small letters."
  },
  {
    "objectID": "brand_guide.html#writing-about-numbers",
    "href": "brand_guide.html#writing-about-numbers",
    "title": "Brand Guide",
    "section": "2.2 Writing about Numbers",
    "text": "2.2 Writing about Numbers\nThe following guidelines refer to numbers in text, charts, and tables.\nAll figures from one to nine should be written in words and those 10 and above should be written in figures. Exceptions include age e.g., persons aged 5 years and currency e.g., GH₵8.\nOrdinal numbers from first to ninth must also be spelled out. 10th and above can be written in figures.\nNumbers above 999 must be written with commas e.g., 511,622.\nWhen a percentage figure is mentioned in a text, the words ‘per cent’ should follow the figure. However, if the figure is quoted in brackets, the percentage symbol (%) should be used. An example is:\n“Among children engaged in economic activity, almost 80 per cent are involved in agriculture-related activities with the highest proportion in Savannah (89.8%) and the least in Greater Accra (26.2%).”\nSentences beginning with numbers should have the figures written out in words regardless of whether the number is below or above ten. An example is:\n“Thirteen per cent of those who have attended school in the past have tertiary education as the highest level attained.”\nFractions (e.g., one-fifth) should be written in words.\nUse “to” in text and not hyphens when referring to ranges e.g., 15 to 19 years.\nNumbers above 1,000 should be fully written out and abbreviations (such as 1k) should not be used.\nNumbers above 1,000,000 can be written in figures and words e.g., 2 million."
  },
  {
    "objectID": "brand_guide.html#spelling",
    "href": "brand_guide.html#spelling",
    "title": "Brand Guide",
    "section": "2.3 Spelling",
    "text": "2.3 Spelling\nSpellings should follow the British convention. Examples are provided below:\nWords ending in the following:\n\n-se: e.g., organise and analyse\n-our: e.g., colour and labour\n-re: e.g., centre and kilometre\n-il: e.g., fulfil and enrol\n\nWords containing the following:\n\n-mme- e.g., programme\n-oe- e.g., foetus, diarrhoea\n\nFor consistency, writers should follow the conventions below for the following compound words:\n\nBaseline and endline\nCoordinator; coordinate\nCooperation, cooperate\nDataset Database\nDecision-maker; decision-making\nEmail\nLong-term\nMetadata\nMultidisciplinary\nOnline\nPolicy maker\nSelf-employment\nUnderperforming"
  },
  {
    "objectID": "brand_guide.html#use-of-abbreviations",
    "href": "brand_guide.html#use-of-abbreviations",
    "title": "Brand Guide",
    "section": "2.4 Use of Abbreviations",
    "text": "2.4 Use of Abbreviations\nAll abbreviations in reports must be fully spelled out when first mentioned.\nAbbreviations should be written without full stops e.g., CAPI.\nAbbreviated measurements (such as km, kg) are acceptable. When using abbreviated measures, there should be no space between number and measure e.g., 50km.\nWhen using the abbreviated form of GSS, a definite article should not be used as illustrated below:\n“The Ghana Statistical Service (GSS) produces census and survey reports per its mandates or GSS produces census and survey reports per its mandates.”"
  },
  {
    "objectID": "brand_guide.html#use-of-parentheses",
    "href": "brand_guide.html#use-of-parentheses",
    "title": "Brand Guide",
    "section": "2.5 Use of Parentheses",
    "text": "2.5 Use of Parentheses\nAs a rule, use round brackets.\nHowever, parentheses within parentheses must be avoided. Square brackets should be used with round brackets to create a double enclosure in the text e.g., the Sustainable Development Goals ([SDGs]).\nParentheses next to parentheses must also be avoided. Square brackets should be used next to parentheses (round brackets) e.g., a third of the population (32.7%) [Figure 1]."
  },
  {
    "objectID": "brand_guide.html#references",
    "href": "brand_guide.html#references",
    "title": "Brand Guide",
    "section": "2.6 References",
    "text": "2.6 References\nPublications should utilise the American Psychological Association (APA) style of referencing."
  },
  {
    "objectID": "brand_guide.html#outline",
    "href": "brand_guide.html#outline",
    "title": "Brand Guide",
    "section": "3.1 Outline",
    "text": "3.1 Outline\nThe outline of the report should be as follows:\nIntroductory pages should be numbered i, ii, iii. and so on. Section names in this part of the report must not be numbered.\n\nFirst page\nAdministrative Map of Ghana\nList of Publications (if applicable)\nForeword\nAcknowledgements\nExecutive summary (if applicable)\nTables of Contents\nList of Figures\nList of Tables\nAbbreviations and Acronyms\n\nMain report pages should be numbered 1, 2, 3 and so on). Section names in this part of the report must be numbered e.g., 1. Background, 2. Concepts and Definitions etc.\n\nBackground\nConcepts and Definitions\nMethodology\nHighlights of Results (if applicable)\nMain Results\nSummary of Findings, Conclusions, and Recommendations\nList of Contributors\n\nEach section of the report must begin on a new page."
  },
  {
    "objectID": "brand_guide.html#length-of-reports",
    "href": "brand_guide.html#length-of-reports",
    "title": "Brand Guide",
    "section": "3.2 Length of Reports",
    "text": "3.2 Length of Reports\n\nThe recommended length of reports is 60 pages excluding references and appendices."
  },
  {
    "objectID": "brand_guide.html#outline-1",
    "href": "brand_guide.html#outline-1",
    "title": "Brand Guide",
    "section": "4.1 Outline",
    "text": "4.1 Outline\n\nThe recommended outline for thematic briefs is provided below: for thematic areas that do not fit into this outline, authors can adapt it as needed.\n\nTable of contents\nList of figures and tables\nIntroduction – including objectives, rationale, and policy relevance\nDefinition of concepts\nLiterature review\nJustification for the selection of correlates  \nData sources\nMethodology\nResults\nConclusions\nList of contributors\nAppendices\n\nEach section of the thematic brief must begin on a new page.\n\n\n4.1.1 Table of Contents\nThe table of contents must be written using a numerical and not alphabetical format. The first heading (you may call them chapter headings) must be written in all caps and the headings under them (second headings) in initial caps.\n\n\n4.1.2 List of Figures\nThe list should have the figure numbers, figure names and page numbers.\n\n\n4.1.3 List of Tables\nThe list should have the table numbers, table names and page numbers.\n\n\n4.1.4 Introduction\nThis section should provide information on the importance of the thematic area for development, the rationale and policy relevance of the thematic brief referencing the relevant policy documents and national commitments (specific policies, programmes, goals, frameworks) to the thematic area. If applicable, the introduction should note any methodological issues affecting comparability of the statistics in the thematic brief.\n\n\n4.1.5 Definition of Concepts, Data Sources, and Estimation\n\n4.1.5.1 Definition of concepts\nAll concepts and indicators used in the subsequent sections must be defined here.\n\n\n4.1.5.2 Data sources\nInformation on all the data sources used for the analysis must also be provided here.\n\n\n4.1.5.3 Estimation\nFor thematic briefs that include a regression analysis, information on the model must be provided here.\n\n\n\n4.1.6 Justification for the Selection of Correlates\nThis section should provide justification for the key correlates of the indicators being studied. Correlates should be selected based on their policy relevance and their potential to be used for targeted interventions. The selection of correlates should be based on a review of academic literature and policy documents.\n\n\n4.1.7 Key Findings\nThis section should present the highlights of key and striking findings from the results. The section should be subdivided into:\n\n4.1.7.1 Trends\nThe section should present trends with data from past censuses, and surveys if needed.\nTrends should only be presented for indicators where the methodology is consistent. As a rule, for comparison of trends, censuses should be compared to censuses and surveys to survey. When using both censuses and surveys, it is preferable to have separate charts side by side comparing the census and survey trend\n\n\n4.1.7.2 Patterns\nThis section should present patterns by age, sex, type of locality, region, and district.\n\n\n4.1.7.2 Correlates\nThis section should present the cross-tabulations of the outcome variable and the correlates, and the regression results.\n\n\n\n4.1.8 Conclusions\nPolicy conclusions guided by the introduction and based on the analyses should be provided. This should be written in non-technical language and should discuss the implications of the findings referencing the policy frameworks in the introduction.\n\n\n4.1.9 Appendices\nAll tables should be placed in the appendix. Only tables that are not available in already published reports should be placed here. The links to relevant tables in other reports and the census statistics dashboard should be provided.\n\n\n4.1.10 List of Contributors\nEach report should have list of all persons that contributed to its production. The title, first name and surname of each person along with their email address, institution and role in the report writing process must be provided as shown below:\n\n\n\nName\nEmail\nInstitution\nRole\n\n\n\n\nProf. Samuel K. Annim\nsamuel.annim@statsghana.gov.gh\nGhana Statistical Service\nLead Author\n\n\nMs. Anointing Yaa Lartey\nannkesh1234@gmail.com\nGhana Statistical Service\nData Analyst\n\n\nDr. Grace Bediako\ngrace.bediako822@gmail.com\nGhana Statistical Service\nReviewer"
  },
  {
    "objectID": "brand_guide.html#length-of-thematic-briefs",
    "href": "brand_guide.html#length-of-thematic-briefs",
    "title": "Brand Guide",
    "section": "4.2 Length of Thematic Briefs",
    "text": "4.2 Length of Thematic Briefs\n\nThe complete Thematic Briefs should not exceed 40 pages."
  },
  {
    "objectID": "brand_guide.html#tables-1",
    "href": "brand_guide.html#tables-1",
    "title": "Brand Guide",
    "section": "5.1 Tables",
    "text": "5.1 Tables\n\nAll figures in tables should be single-spaced and right indented, and headings centred.\nAbsolute numbers in tables must have a comma separator for numbers that are more than three digits (i.e., 1,123).\nUse of decimal points for percentages must be consistent throughout the document. One decimal place is recommended for all tables.\nFor tables that span more than one page, each page should have the table header repeated but not the table name.\nThe table heading should include the section/chapter number and the table number under that chapter and separated by (.).\nThe table name must provide information on the sample, the indicator being presented in the table and the levels of disaggregation in that order. An example is:\nTable 5.1: Population 15 years and older by economic activity status, sex, type of locality and region\nTable names and headers must indicate the units of measurement e.g., percent, GH₵.\nTables should have a top and bottom border but not right and left borders. Within the table only the table headers should have top and bottom borders as shown below:\n\nNotes can be added under tables as needed, to provide supplementary detail."
  },
  {
    "objectID": "brand_guide.html#charts-1",
    "href": "brand_guide.html#charts-1",
    "title": "Brand Guide",
    "section": "5.2 Charts",
    "text": "5.2 Charts\nNumerical numbering should be used for all charts which should reflect the section/chapter number and the figure number.\nUse of decimal points must be consistent throughout the document. One decimal place is recommended for all charts. Exceptions to this rule are currency (GH₵14.50) and age (24 years)\nThe name of the chart must provide information on the sample, the indicator being presented in the table and the levels of disaggregation in that order. An example is:\nFigure 5.1: Proportion of economically active persons 15 years and older by type of locality and sex"
  },
  {
    "objectID": "brand_guide.html#highlights",
    "href": "brand_guide.html#highlights",
    "title": "Brand Guide",
    "section": "5.3 Highlights",
    "text": "5.3 Highlights\nFor each highlight, there should be one graph to illustrate the finding and one to three sentences explaining the key finding.\nCentury Gothic size 14 in white colour should be used for highlights with a blue (#2E37FF) background as shown below:\nFigure 2: Example of a highlight"
  },
  {
    "objectID": "brand_guide.html#colours",
    "href": "brand_guide.html#colours",
    "title": "Brand Guide",
    "section": "6.2 Colours",
    "text": "6.2 Colours\nThe following colour schemes must be used for all graphs.\n\n6.1.1 Charts\n\nSex\n\n                    \n                    Male\n                        \n                            Hex: #206095 rgb(32, 96, 149).\n                        \n                    \n                    \n                        Female\n                        \n                            Hex: #F66068 rgb(246, 96,104).\n                        \n                    \n                \n\n\n\n\nLocality Type\n\n                    \n                         National  \n                        \n                         Hex: #27A0CC .\n                        \n                    \n                    \n                        Urban\n                        \n                            Hex: #871A5B .\n                        \n                    \n                            \n                                Rural\n                        \n                            \n                            Hex: #22D0B6 .\n                        \n                    \n                \n                \n             \n\n\n\nNeutral\n\n\n                    \n                        \n                            Hex: #002060\n                        \n                    \n                    \n                        \n                            Hex: #0070C0\n                        \n                    \n                    \n                        \n                            Hex: #00B0F0\n                        \n                    \n                    \n                        \n                            Hex: #8EA9DB\n                        \n                    \n                    \n                        \n                            Hex: #9BC2E6\n                        \n                    \n                    \n                        \n                            Hex: #2C7FB8\n                        \n                    \n                    \n    \n    \n    \n    \n\n\n\nPositive ~ Negative\n\n\n                    \n                        \n                            Hex: #38761D\n                        \n                    \n                    \n                        \n                            #6AA84F\n                        \n                    \n                    \n                        \n                            Hex: #93C47D\n                        \n                    \n                    \n                        \n                            Hex: #F4CCCC\n                        \n                    \n                    \n                        \n                            Hex: #E06666\n                        \n                    \n                    \n                        \n                            Hex: #990000\n                        \n                    \n                    \n    \n    \n    \n    \n\n\n\nPopulation & Density\n\n\n                    \n                        \n                            #FFFFCC\n                        \n                    \n                    \n                        \n                            Hex: #C7E9B4\n                        \n                    \n                    \n                        \n                            Hex: #7FCDBB\n                        \n                    \n                    \n                        \n                            Hex: #41B6C4\n                        \n                    \n                    \n                        \n                            Hex: #2C7FB8\n                        \n                    \n                    \n    \n    \n    \n    \n\n\n\nIncidence\n\n\n                    \n                        \n                            #FECCCC\n                        \n                    \n                    \n     \n                        \n                            Hex: #FF9999\n                        \n                    \n                    \n     \n                        \n                            Hex: #FF6666\n                        \n                    \n                   \n     \n                        \n                            Hex: #FF3333\n                        \n                    \n                   \n     \n                        \n                            Hex: #CC0000\n                        \n                    \n     \n     \n                        \n                            Hex: #990000\n                        \n                    \n                    \n    \n\n\n\nSex\nTo show the difference between male and female, please use these colours\n    \n                    \n                    Male\n                        \n                            Hex: #206095 rgb(32, 96, 149).\n                        \n                    \n                    \n                        Female\n                        \n                            Hex: #F66068 rgb(246, 96,104)."
  },
  {
    "objectID": "graphics-guide.html#use-of-fonts",
    "href": "graphics-guide.html#use-of-fonts",
    "title": "R visualization",
    "section": "Use of Fonts",
    "text": "Use of Fonts\n\nCentury Gothic Bold, font size 12 should be used for the labels and values on the graph."
  },
  {
    "objectID": "graphics-guide.html#use-of-colours",
    "href": "graphics-guide.html#use-of-colours",
    "title": "R visualization",
    "section": "Use of Colours",
    "text": "Use of Colours\nPlease use the following colour schemes for different types of disaggregation\n\nSex\n\n                    \n                    Male\n                        \n                            Hex: #206095 rgb(32, 96, 149).\n                        \n                    \n                    \n                        Female\n                        \n                            Hex: #F66068 rgb(246, 96,104).\n                        \n                    \n                \n\n\n\nLocality Type\n\n                    \n                         National  \n                        \n                         Hex: #27A0CC .\n                        \n                    \n                    \n                        Urban\n                        \n                            Hex: #871A5B .\n                        \n                    \n                            \n                                Rural\n                        \n                            \n                            Hex: #22D0B6 .\n                        \n                    \n                \n                \n             \n\n\nNeutral\n\n\n                    \n                        \n                            Hex: #002060\n                        \n                    \n                    \n                        \n                            Hex: #0070C0\n                        \n                    \n                    \n                        \n                            Hex: #00B0F0\n                        \n                    \n                    \n                        \n                            Hex: #8EA9DB\n                        \n                    \n                    \n                        \n                            Hex: #9BC2E6\n                        \n                    \n                    \n                        \n                            Hex: #2C7FB8\n                        \n                    \n                    \n    \n    \n    \n\n\nPositive ~ Negative\n\n\n                    \n                        \n                            Hex: #38761D\n                        \n                    \n                    \n                        \n                            #6AA84F\n                        \n                    \n                    \n                        \n                            Hex: #93C47D\n                        \n                    \n                    \n                        \n                            Hex: #F4CCCC\n                        \n                    \n                    \n                        \n                            Hex: #E06666\n                        \n                    \n                    \n                        \n                            Hex: #990000\n                        \n                    \n                    \n    \n    \n    \n\n\nPopulation & Density\n\n\n                    \n                        \n                            #FFFFCC\n                        \n                    \n                    \n                        \n                            Hex: #C7E9B4\n                        \n                    \n                    \n                        \n                            Hex: #7FCDBB\n                        \n                    \n                    \n                        \n                            Hex: #41B6C4\n                        \n                    \n                    \n                        \n                            Hex: #2C7FB8\n                        \n                    \n                    \n    \n    \n    \n\n\nIncidence\n\n\n                    \n                        \n                            #FECCCC\n                        \n                    \n                    \n     \n                        \n                            Hex: #FF9999\n                        \n                    \n                    \n     \n                        \n                            Hex: #FF6666\n                        \n                    \n                   \n     \n                        \n                            Hex: #FF3333\n                        \n                    \n                   \n     \n                        \n                            Hex: #CC0000\n                        \n                    \n     \n     \n                        \n                            Hex: #990000"
  },
  {
    "objectID": "graphics-guide.html#bar-plots",
    "href": "graphics-guide.html#bar-plots",
    "title": "R visualization",
    "section": "Bar Plots",
    "text": "Bar Plots\n\n\nOne Color\n\nmtcars %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = factor(cyl), y = n)) +\n  geom_col(width = 0.8) +\n  geom_text(mapping = aes(label = n), vjust = -1) +\n  gssthemes() +\n  scale_y_continuous( expand = c( 0, 0 ),\n                      limits = nicelimits,\n                      breaks = scales::extended_breaks(only.loose = TRUE)) +\n  coord_cartesian(clip = \"off\")\n\n\n\n\n\n\nOne Color (Rotated)\nThis example introduces coord_flip() instead of coord_cartesian() and bring back some theme elements to draw vertical instead of horizontal grid lines\n\nmtcars %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = factor(cyl), y = n)) +\n  geom_col(width = 0.8) +\n  geom_text(mapping = aes(label = n), hjust = -1) +\n  gssthemes() +\n    # use coord_flip() instead of coord_cartesian()\n  coord_flip(clip = \"off\") +\n    theme(panel.grid.major.x=element_line(color = \"gray\", size=0.25),\n                panel.grid.major.y=element_blank())\n\n\n\n\n\n\nThree Colors\nThis is identical to the previous plot except colors and a legend are added with fill = cyl. Turning x into a factor with factor(cyl) skips 5 and 7 on the x-axis. Adding fill = cyl without factor() would have created a continuous color scheme and legend.\n\nmtcars %>%\n  mutate(cyl = factor(cyl)) %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = cyl, y = n, fill = cyl)) +\n  geom_col() +\n  geom_text(mapping = aes(label = n), vjust = -1) +    \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +\n  remove_ticks() +\n  remove_axis() +\n\n\n\nStacked Bar Plot\nAn additional aesthetic can easily be added to bar plots by adding fill = categorical variable to the mapping. Here, transmission type subsets each bar showing the count of cars with different numbers of cylinders.\n\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%  \n  group_by(am) %>%\n  count(cyl) %>%\n  group_by(cyl) %>%\n  arrange(desc(am)) %>%\n  mutate(label_height = cumsum(n)) %>%\n  ggplot() +\n  geom_col(mapping = aes(x = cyl, y = n, fill = am)) +\n  geom_text(aes(x = cyl, y = label_height - 0.5, label = n, color = am)) +\n  scale_color_manual(values = c(\"white\", \"black\")) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  remove_axis() +\n  guides(color = FALSE)\n\n\n\nStacked Bar Plot With Position = Fill\nThe previous examples used geom_col(), which takes a y value for bar height. This example uses geom_bar() which sums the values and generates a value for bar heights. In this example, position = \"fill\" in geom_bar() changes the y-axis from count to the proportion of each bar.\n\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%  \n  ggplot() +\n  geom_bar(mapping = aes(x = cyl, fill = am), position = \"fill\") +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1)), labels = scales::percent) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  guides(color = FALSE)\n\n\n\nDodged Bar Plot\nSubsetted bar charts in ggplot2 are stacked by default. position = \"dodge\" in geom_col() expands the bar chart so the bars appear next to each other.\n\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%\n  group_by(am) %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(cyl, y = n, fill = factor(am))) +\n  geom_col(position = \"dodge\") +\n  geom_text(aes(label = n), position = position_dodge(width = 0.7), vjust = -1) +    \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  remove_axis()\n\n\n\nLollipop plot/Cleveland dot plot\nLollipop plots and Cleveland dot plots are minimalist alternatives to bar plots. The key to both plots is to order the data based on the continuous variable using arrange() and then turn the discrete variable into a factor with the ordered levels of the continuous variable using mutate(). This step “stores” the order of the data.\n\nLollipop plot\n\nmtcars %>%\n    rownames_to_column(\"model\") %>%\n    arrange(mpg) %>%\n    mutate(model = factor(model, levels = .$model)) %>%\n    ggplot(aes(mpg, model)) +\n        geom_segment(aes(x = 0, xend = mpg, y = model, yend = model)) + \n        geom_point() +\n        scale_x_continuous(expand = expand_scale(mult = c(0, 0)), limits = c(0, 40)) +\n        labs(x = NULL, \n                 y = \"Miles Per Gallon\")\n\n\n\nCleveland dot plot\n\nmtcars %>%\n    rownames_to_column(\"model\") %>%\n    arrange(mpg) %>%\n    mutate(model = factor(model, levels = .$model)) %>%\n    ggplot(aes(mpg, model)) +\n        geom_point() +\n        scale_x_continuous(expand = expand_scale(mult = c(0, 0)), limits = c(0, 40)) +\n        labs(x = NULL, \n                 y = \"Miles Per Gallon\")\n\n\n\n\nDumbell plot"
  },
  {
    "objectID": "graphics-guide.html#scatter-plots",
    "href": "graphics-guide.html#scatter-plots",
    "title": "R visualization",
    "section": "Scatter Plots",
    "text": "Scatter Plots\n\n\nOne Color Scatter Plot\nScatter plots are useful for showing relationships between two or more variables. Use scatter_grid() from library(urbnthemes) to easily add vertical grid lines for scatter plots.\n\nmtcars %>%\n  ggplot(mapping = aes(x = wt, y = mpg)) +\n  geom_point() +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:8 * 5) +\n  labs(x = \"Weight (thousands of pounds)\",\n       y = \"City MPG\") +\n  scatter_grid()\n\n\n\nHigh-Density Scatter Plot with Transparency\nLarge numbers of observations can sometimes make scatter plots tough to interpret because points overlap. Adding alpha = with a number between 0 and 1 adds transparency to points and clarity to plots. Now it’s easy to see that jewelry stores are probably rounding up but not rounding down carats!\n\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     limits = c(0, 20000),\n                     breaks = 0:4 * 5000,\n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n\n\n\nHex Scatter Plot\nSometimes transparency isn’t enough to bring clarity to a scatter plot with many observations. As n increases into the hundreds of thousands and even millions, geom_hex can be one of the best ways to display relationships between two variables.\n\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_hex(mapping = aes(fill = ..count..)) +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     limits = c(0, 20000),\n                     breaks = 0:4 * 5000,\n                     labels = scales::dollar) +\n    scale_fill_gradientn(labels = scales::comma) +  \n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid() +\n  theme(legend.position = \"right\",\n        legend.direction = \"vertical\")\n\n\n\nScatter Plots With Random Noise\nSometimes scatter plots have many overlapping points but a reasonable number of observations. geom_jitter adds a small amount of random noise so points are less likely to overlap. width and height control the amount of noise that is added. In the following before-and-after, notice how many more points are visible after adding jitter.\n\nBefore\n\nmpg %>%\n  ggplot(mapping = aes(x = displ, y = cty)) +\n  geom_point() +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 8),\n                     breaks = 0:8) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:4 * 10) +\n  labs(x = \"Displacement\",\n       y = \"City MPG\") +\n  scatter_grid()\n\n\n\nAfter\n\nset.seed(2017)\nmpg %>%\n  ggplot(mapping = aes(x = displ, y = cty)) +\n  geom_jitter() +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 8),\n                     breaks = 0:8) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:4 * 10) +\n  labs(x = \"Displacement\",\n       y = \"City MPG\") +\n  scatter_grid()\n\n\n\n\nScatter Plots with Varying Point Size\nWeights and populations can be mapped in scatter plots to the size of the points. Here, the number of households in each state is mapped to the size of each point using aes(size = hhpop). Note: ggplot2::geom_point() is used instead of geom_point().\n\n\nScatter Plots with Fill\nA third aesthetic can be added to scatter plots. Here, color signifies the number of cylinders in each car. Before ggplot() is called, Cylinders is created using library(dplyr) and the piping operator %>%.\n\nmtcars %>%\n  mutate(cyl = paste(cyl, \"cylinders\")) %>%\n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:8 * 5) +\n  labs(x = \"Weight (thousands of pounds)\",\n       y = \"City MPG\") +\n  scatter_grid()"
  },
  {
    "objectID": "graphics-guide.html#line-plots",
    "href": "graphics-guide.html#line-plots",
    "title": "R visualization",
    "section": "Line Plots",
    "text": "Line Plots\n\n\neconomics %>%\n  ggplot(mapping = aes(x = date, y = unemploy)) +\n  geom_line() +\n  scale_x_date(expand = expand_scale(mult = c(0.002, 0)), \n               breaks = \"10 years\",\n               limits = c(as.Date(\"1961-01-01\"), as.Date(\"2020-01-01\")),\n               date_labels = \"%Y\") +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     breaks = 0:4 * 4000,\n                     limits = c(0, 16000),\n                     labels = scales::comma) +\n  labs(x = \"Year\", \n       y = \"Number Unemployed (1,000s)\")\n\n\nLines Plots With Multiple Lines\n\nlibrary(gapminder)\n\ngapminder %>%\n  filter(country %in% c(\"Australia\", \"Canada\", \"New Zealand\")) %>%\n  mutate(country = factor(country, levels = c(\"Canada\", \"Australia\", \"New Zealand\"))) %>%\n  ggplot(aes(year, gdpPercap, color = country)) +\n  geom_line() +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     breaks = c(1952 + 0:12 * 5), \n                     limits = c(1952, 2007)) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar, \n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Per capita GDP (US dollars)\")\n\nPlotting more than one variable can be useful for seeing the relationship of variables over time, but it takes a small amount of data munging.\nThis is because ggplot2 wants data in a “long” format instead of a “wide” format for line plots with multiple lines. gather() and spread() from the tidyr package make switching back-and-forth between “long” and “wide” painless. Essentially, variable titles go into “key” and variable values go into “value”. Then ggplot2, turns the different levels of the key variable (population, unemployment) into colors.\n\nas_tibble(EuStockMarkets) %>%\n    mutate(date = time(EuStockMarkets)) %>%\n    gather(key = \"key\", value = \"value\", -date) %>%\n    ggplot(mapping = aes(x = date, y = value, color = key)) +\n    geom_line() +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(1991, 1999), \n                     breaks = c(1991, 1993, 1995, 1997, 1999)) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     breaks = 0:4 * 2500,\n                     labels = scales::dollar, \n                     limits = c(0, 10000)) +  \n    labs(x = \"Date\",\n             y = \"Value\")\n\n\n\nStep plot\ngeom_line() connects coordinates with the shortest possible straight line. Sometimes step plots are necessary because y values don’t change between coordinates. For example, the upper-bound of the Federal Funds Rate is set at regular intervals and remains constant until it is changed.\n\n# downloaded from FRED on 2018-12-06\n\n# https://fred.stlouisfed.org/series/DFEDTARU\n\nfed_fund_rate <- read_csv(\n  \"date, fed_funds_rate\n   2014-01-01,0.0025\n   2015-12-16,0.0050\n   2016-12-14,0.0075\n   2017-03-16,0.0100\n   2017-06-15,0.0125\n   2017-12-14,0.0150\n   2018-03-22,0.0175\n   2018-06-14,0.0200\n   2018-09-27,0.0225\n   2018-12-06,0.0225\")\n\nfed_fund_rate %>%\n  ggplot(mapping = aes(x = date, y = fed_funds_rate)) + \n  geom_step() +\n  scale_x_date(expand = expand_scale(mult = c(0.002, 0)), \n               breaks = \"1 year\",\n               limits = c(as.Date(\"2014-01-01\"), as.Date(\"2019-01-01\")),\n               date_labels = \"%Y\") +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     breaks = c(0, 0.01, 0.02, 0.03),\n                     limits = c(0, 0.03),\n                     labels = scales::percent) +  \n    labs(x = \"Date\",\n             y = \"Upper-bound of the Federal Funds Rate\")\n\n\n\nPath plot\nThe Beveridge curve is a macroeconomic plot that displays a relationship between the unemployment rate and the vacancy rate. Movements along the curve indicate changes in the business cyle and horizontal shifts of the curve suggest structural changes in the labor market.\nLines in Beveridge curves do not monotonically move from left to right. Therefore, it is necessary to use geom_path().\n\n# seasonally-adjusted, quarterly vacancy rate - JOLTS # seasonally-adjusted, quarterly unemployment rate - CPS\n\n# pulled from FRED on April 11, 2018. \n\nlibrary(ggrepel)\n\nbeveridge <- read_csv(\n    \"quarter, vacanacy_rate, unempoyment_rate\n    2006-01-01,0.0310,0.0473\n    2006-04-01,0.0316,0.0463\n    2006-07-01,0.0313,0.0463\n    2006-10-01,0.0310,0.0443\n    2007-01-01,0.0323,0.0450\n    2007-04-01,0.0326,0.0450\n    2007-07-01,0.0316,0.0466\n    2007-10-01,0.0293,0.0480\n    2008-01-01,0.0286,0.0500\n    2008-04-01,0.0280,0.0533\n    2008-07-01,0.0253,0.0600\n    2008-10-01,0.0220,0.0686\n    2009-01-01,0.0196,0.0826\n    2009-04-01,0.0180,0.0930\n    2009-07-01,0.0176,0.0963\n    2009-10-01,0.0180,0.0993\n    2010-01-01,0.0196,0.0983\n    2010-04-01,0.0220,0.0963\n    2010-07-01,0.0216,0.0946\n    2010-10-01,0.0220,0.0950\n    2011-01-01,0.0226,0.0903\n    2011-04-01,0.0236,0.0906\n    2011-07-01,0.0250,0.0900\n    2011-10-01,0.0243,0.0863\n    2012-01-01,0.0270,0.0826\n    2012-04-01,0.0270,0.0820\n    2012-07-01,0.0266,0.0803\n    2012-10-01,0.0260,0.0780\n    2013-01-01,0.0276,0.0773\n    2013-04-01,0.0280,0.0753\n    2013-07-01,0.0280,0.0723\n    2013-10-01,0.0276,0.0693\n    2014-01-01,0.0290,0.0666\n    2014-04-01,0.0323,0.0623\n    2014-07-01,0.0326,0.0610\n    2014-10-01,0.0330,0.0570\n    2015-01-01,0.0350,0.0556\n    2015-04-01,0.0366,0.0540\n    2015-07-01,0.0373,0.0510\n    2015-10-01,0.0360,0.0500\n    2016-01-01,0.0386,0.0493\n    2016-04-01,0.0383,0.0486\n    2016-07-01,0.0383,0.0493\n    2016-10-01,0.0363,0.0473\n    2017-01-01,0.0366,0.0466\n    2017-04-01,0.0390,0.0433\n    2017-07-01,0.0406,0.0430\n    2017-10-01,0.0386,0.0410\")\n\nlabels <- beveridge %>%\n  filter(lubridate::month(quarter) == 1)\n\nbeveridge %>%\n    ggplot() +\n    geom_path(mapping = aes(x = unempoyment_rate, y = vacanacy_rate), alpha = 0.5) +\n  geom_point(data = labels, mapping = aes(x = unempoyment_rate, y = vacanacy_rate)) +\n  geom_text_repel(data = labels, mapping = aes(x = unempoyment_rate, y = vacanacy_rate, label = lubridate::year(quarter))) +  \n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0.04, 0.1),\n                     labels = scales::percent) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.05),\n                     limits = c(0, 0.05),\n                     labels = scales::percent) +  \n    labs(x = \"Seasonally-adjusted unemployment rate\",\n             y = \"Seasonally-adjusted vacancy rate\") +  \n  scatter_grid()\n\n\n\nSlope plots\n\n# https://www.bls.gov/lau/\nlibrary(ggrepel)\n\nunemployment <- tibble(\n    time = c(\"October 2009\", \"October 2009\", \"October 2009\", \"August 2017\", \"August 2017\", \"August 2017\"),\n    rate = c(7.4, 7.1, 10.0, 3.9, 3.8, 6.4),\n    state = c(\"Maryland\", \"Virginia\", \"Washington, D.C.\", \"Maryland\", \"Virginia\", \"Washington, D.C.\")\n)\n\nlabel <- tibble(label = c(\"October 2009\", \"August 2017\"))\noctober <- filter(unemployment, time == \"October 2009\")\naugust <- filter(unemployment, time == \"August 2017\")\n\nunemployment %>%\n    mutate(time = factor(time, levels = c(\"October 2009\", \"August 2017\")),\n           state = factor(state, levels = c(\"Washington, D.C.\", \"Maryland\", \"Virginia\"))) %>%\n    ggplot() + \n    geom_line(aes(time, rate, group = state, color = state), show.legend = FALSE) +\n    geom_point(aes(x = time, y = rate, color = state)) +\n    labs(subtitle = \"Unemployment Rate\") +\n    theme(axis.ticks.x = element_blank(),\n                axis.title.x = element_blank(),\n                axis.ticks.y = element_blank(),\n        axis.title.y = element_blank(), \n        axis.text.y = element_blank(),\n                panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n                axis.line = element_blank()) +\n    geom_text_repel(data = october, mapping = aes(x = time, y = rate, label = as.character(rate)), nudge_x = -0.06) + \n    geom_text_repel(data = august, mapping = aes(x = time, y = rate, label = as.character(rate)), nudge_x = 0.06)"
  },
  {
    "objectID": "graphics-guide.html#univariate",
    "href": "graphics-guide.html#univariate",
    "title": "R visualization",
    "section": "Univariate",
    "text": "Univariate\n\nThere are a number of ways to explore the distributions of univariate data in R. Some methods, like strip charts, show all data points. Other methods, like the box and whisker plot, show selected data points that communicate key values like the median and 25th percentile. Finally, some methods don’t show any of the underlying data but calculate density estimates. Each method has advantages and disadvantages, so it is worthwhile to understand the different forms. For more information, read 40 years of boxplots by Hadley Wickham and Lisa Stryjewski.\n\nStrip Chart\nStrip charts, the simplest univariate plot, show the distribution of values along one axis. Strip charts work best with variables that have plenty of variation. If not, the points tend to cluster on top of each other. Even if the variable has plenty of variation, it is often important to add transparency to the points with alpha = so overlapping values are visible.\n\nmsleep %>%\n  ggplot(aes(x = sleep_total, y = factor(1))) +\n  geom_point(alpha = 0.2, size = 5) +\n  labs(y = NULL) +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +\n  scale_y_discrete(labels = NULL) +\n  labs(title = \"Total Sleep Time of Different Mammals\",\n       x = \"Total sleep time (hours)\",\n       y = NULL) +\n  theme(axis.ticks.y = element_blank())\n\n\n\nStrip Chart with Highlighting\nBecause strip charts show all values, they are useful for showing where selected points lie in the distribution of a variable. The clearest way to do this is by adding geom_point() twice with filter() in the data argument. This way, the highlighted values show up on top of unhighlighted values.\n\nggplot() +\n  geom_point(data = filter(msleep, name != \"Red fox\"), \n                    aes(x = sleep_total, \n                        y = factor(1)),\n             alpha = 0.2, \n             size = 5,\n                     color = \"grey50\") +\n  geom_point(data = filter(msleep, name == \"Red fox\"),\n             aes(x = sleep_total, \n                 y = factor(1), \n                 color = name),\n             alpha = 0.8,\n             size = 5) +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +  \n  scale_y_discrete(labels = NULL) +\n  labs(title = \"Total Sleep Time of Different Mammals\",\n       x = \"Total sleep time (hours)\",\n       y = NULL,\n       legend) +\n  guides(color = guide_legend(title = NULL)) +\n  theme(axis.ticks.y = element_blank())\n\n\n\nSubsetted Strip Chart\nAdd a y variable to see the distributions of the continuous variable in subsets of a categorical variable.\n\nlibrary(forcats)\n\nmsleep %>%\n  filter(!is.na(vore)) %>%\n  mutate(vore = fct_recode(vore, \n                            \"Insectivore\" = \"insecti\",\n                            \"Omnivore\" = \"omni\", \n                            \"Herbivore\" = \"herbi\", \n                            \"Carnivore\" = \"carni\"\n                            )) %>%\n  ggplot(aes(x = sleep_total, y = vore)) +\n  geom_point(alpha = 0.2, size = 5) +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +  \n  labs(title = \"Total Sleep Time of Different Mammals by Diet\",\n       x = \"Total sleep time (hours)\",\n       y = NULL) +\n  theme(axis.ticks.y = element_blank())\n\n\n\nHistograms\nHistograms divide the distribution of a variable into n equal-sized bins and then count and display the number of observations in each bin. Histograms are sensitive to bin width. As ?geom_histogram notes, “You should always override [the default binwidth] value, exploring multiple widths to find the best to illustrate the stories in your data.”\n\nggplot(data = diamonds, mapping = aes(x = depth)) + \n  geom_histogram(bins = 100) +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, 100)) +  \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2)), labels = scales::comma) +\n  labs(x = \"Depth\",\n       y = \"Count\")\n\n\n\nBoxplots\nBoxplots were invented in the 1970s by John Tukey1. Instead of showing the underlying data or binned counts of the underlying data, they focus on important values like the 25th percentile, median, and 75th percentile.\n\nInsectSprays %>%\n  ggplot(mapping =  aes(x = spray, y = count)) +\n  geom_boxplot() +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2))) +\n  labs(x = \"Type of insect spray\",\n       y = \"Number of dead insects\") +\n  remove_ticks()\n\n\n\nSmoothed Kernel Density Plots\nContinuous variables with smooth distributions are sometimes better represented with smoothed kernel density estimates than histograms or boxplots. geom_density() computes and plots a kernel density estimate. Notice the lumps around integers and halves in the following distribution because of rounding.\n\ndiamonds %>%\n  ggplot(mapping = aes(carat)) +\n  geom_density(color = NA) +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, NA)) +\n    scale_y_continuous(expand = expand_scale(mult = c(0, 0.2))) +\n  labs(x = \"Carat\",\n       y = \"Density\")\n\n\ndiamonds %>%\n  mutate(cost = ifelse(price > 5500, \"More than $5,500 +\", \"$0 to $5,500\")) %>%\n  ggplot(mapping = aes(carat, fill = cost)) +\n  geom_density(alpha = 0.25, color = NA) +\n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                     limits = c(0, NA)) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +\n  labs(x = \"Carat\",\n       y = \"Density\")\n\n\n\nRidgeline Plots\nRidgeline plots are partially overlapping smoothed kernel density plots faceted by a categorical variable that pack a lot of information into one elegant plot.\n\nlibrary(ggridges)\n\nggplot(diamonds, mapping = aes(x = price, y = cut)) +\n    geom_density_ridges(fill = \"#1696d2\") +\n  labs(x = \"Price\",\n       y = \"Cut\")\n\n\n\nViolin Plots\nViolin plots are symmetrical displays of smooth kernel density plots.\n\nInsectSprays %>%\n  ggplot(mapping = aes(x = spray, y = count, fill = spray)) +\n  geom_violin(color = NA) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2))) +\n  labs(x = \"Type of insect spray\",\n       y = \"Number of dead insects\") +\n  remove_ticks()\n\n\n\nBean Plot\nIndividual outliers and important summary values are not visible in violin plots or smoothed kernel density plots. Bean plots, created by Peter Kampstra in 2008, are violin plots with data shown as small lines in a one-dimensional sstrip plot and larger lines for the mean.\n\nmsleep %>%\n  filter(!is.na(vore)) %>%\n  mutate(vore = fct_recode(vore, \n                            \"Insectivore\" = \"insecti\",\n                            \"Omnivore\" = \"omni\", \n                            \"Herbivore\" = \"herbi\", \n                            \"Carnivore\" = \"carni\"\n                            )) %>%\n  ggplot(aes(x = vore, y = sleep_total, fill = vore)) +\n  stat_summary(fun.y = \"mean\",\n               colour = \"black\", \n               size = 30,\n               shape = 95,\n               geom = \"point\") +\n  geom_violin(color = NA) +\n  geom_jitter(width = 0,\n              height = 0.05,\n              alpha = 0.4,\n              shape = \"-\",\n              size = 10,\n                        color = \"grey50\") +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2))) +  \n    labs(x = NULL,\n         y = \"Total sleep time (hours)\") +\n  theme(legend.position = \"none\") +\n  remove_ticks()"
  },
  {
    "objectID": "graphics-guide.html#area-plot",
    "href": "graphics-guide.html#area-plot",
    "title": "R visualization",
    "section": "Area Plot",
    "text": "Area Plot\n\n\nStacked Area\n\ntxhousing %>%\n  filter(city %in% c(\"Austin\",\"Houston\",\"Dallas\",\"San Antonio\",\"Fort Worth\")) %>%\n  group_by(city, year) %>%\n  summarize(sales = sum(sales)) %>%\n  ggplot(aes(x = year, y = sales, fill = city)) +\n  geom_area(position = \"stack\") +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0)),\n                     limits = c(2000, 2015),\n                     breaks = 2000 + 0:15) +  \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2)), \n                     labels = scales::comma) +\n  labs(x = \"Year\",\n       y = \"Home sales\")\n\n\n\nFilled Area\n\ntxhousing %>%\n  filter(city %in% c(\"Austin\",\"Houston\",\"Dallas\",\"San Antonio\",\"Fort Worth\")) %>%\n  group_by(city, year) %>%\n  summarize(sales = sum(sales)) %>%\n  ggplot(aes(x = year, y = sales, fill = city)) +\n  geom_area(position = \"fill\") +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0)),\n                     limits = c(2000, 2015),\n                     breaks = 2000 + 0:15) +  \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.02)),\n                     breaks = c(0, 0.25, 0.5, 0.75, 1),\n                     labels = scales::percent) +\n  labs(x = \"Year\",\n       y = \"Home sales\")"
  },
  {
    "objectID": "graphics-guide.html#heat-map",
    "href": "graphics-guide.html#heat-map",
    "title": "R visualization",
    "section": "Heat map",
    "text": "Heat map\n\n\nlibrary(fivethirtyeight)\n\nbad_drivers %>%\n  filter(state %in% c(\"Maine\", \"New Hampshire\", \"Vermont\", \"Massachusetts\", \"Connecticut\", \"New York\")) %>%\n  mutate(`Number of\\nDrivers` = scale(num_drivers),\n         `Percent\\nSpeeding` = scale(perc_speeding),\n         `Percent\\nAlcohol` = scale(perc_alcohol),\n         `Percent Not\\nDistracted` = scale(perc_not_distracted),\n         `Percent No\\nPrevious` = scale(perc_no_previous),\n         state = factor(state, levels = rev(state))\n         ) %>%\n  select(-insurance_premiums, -losses, -(num_drivers:losses)) %>%\n  gather(`Number of\\nDrivers`:`Percent No\\nPrevious`, key = \"variable\", value = \"SD's from Mean\") %>%\n  ggplot(aes(variable, state)) +\n    geom_tile(aes(fill = `SD's from Mean`)) +\n    labs(x = NULL,\n         y = NULL) + \n    scale_fill_gradientn() +\n    theme(legend.position = \"right\",\n          legend.direction = \"vertical\",\n          axis.line.x = element_blank(),\n          panel.grid.major.y = element_blank()) +\n  remove_ticks()\n#https://learnr.wordpress.com/2010/01/26/ggplot2-quick-heatmap-plotting/"
  },
  {
    "objectID": "graphics-guide.html#faceting-and-small-multiples",
    "href": "graphics-guide.html#faceting-and-small-multiples",
    "title": "R visualization",
    "section": "Faceting and Small Multiples",
    "text": "Faceting and Small Multiples\n\n\nfacet_wrap()\nR’s faceting system is a powerful way to make “small multiples”.\nSome edits to the theme may be necessary depending upon how many rows and columns are in the plot.\n\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  facet_wrap(~cut, ncol = 5) +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0)),\n                     limits = c(0, 6)) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n\n\n\nfacet_grid()\n\ndiamonds %>%\n  filter(color %in% c(\"D\", \"E\", \"F\", \"G\")) %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  facet_grid(color ~ cut) +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0)),\n                     limits = c(0, 4)) +  \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  theme(panel.spacing = unit(20L, \"pt\")) +\n  scatter_grid()"
  },
  {
    "objectID": "graphics-guide.html#smoothers",
    "href": "graphics-guide.html#smoothers",
    "title": "R visualization",
    "section": "Smoothers",
    "text": "Smoothers\n\ngeom_smooth() fits and plots models to data with two or more dimensions.\nUnderstanding and manipulating defaults is more important for geom_smooth() than other geoms because it contains a number of assumptions. geom_smooth() automatically uses loess for datasets with fewer than 1,000 observations and a generalized additive model with formula = y ~ s(x, bs = \"cs\") for datasets with greater than 1,000 observations. Both default to a 95% confidence interval with the confidence interval displayed.\nModels are chosen with method = and can be set to lm(), glm(), gam(), loess(), rlm(), and more. Formulas can be specified with formula = and y ~ x syntax. Plotting the standard error is toggled with se = TRUE and se = FALSE, and level is specificed with level =. As always, more information can be seen in RStudio with ?geom_smooth().\ngeom_point() adds a scatterplot to geom_smooth(). The order of the function calls is important. The function called second will be layed on top of the function called first.\n\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n    geom_point(alpha = 0.05) +\n    geom_smooth(color =  \"#ec008b\") +\n    scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                       limits = c(0, 5),\n                       breaks = 0:5) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +  \n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n\ngeom_smooth can be subset by categorical and factor variables. This requires subgroups to have a decent number of observations and and a fair amount of variability across the x-axis. Confidence intervals often widen at the ends so special care is needed for the chart to be meaningful and readable.\nThis example uses Loess with MPG = displacement.\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = factor(cyl))) +\n    geom_point(alpha = 0.2) +\n    geom_smooth() +\n    scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                       limits = c(0, 7),\n                       breaks = 0:7) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                     limits = c(0, 60)) +  \n    labs(x = \"Engine displacement\",\n             y = \"Highway MPG\") +\n  scatter_grid()\n\nThis example uses linear models with MPG = displacement.\n\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = factor(cyl))) +\n    geom_point(alpha = 0.2) +\n    geom_smooth(method = \"lm\") +\n    scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), \n                       limits = c(0, 7),\n                       breaks = 0:7) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                     limits = c(0, 60)) +  \n    labs(x = \"Engine displacement\",\n             y = \"Highway MPG\") +\n  scatter_grid()"
  },
  {
    "objectID": "graphics-guide.html#highlighting",
    "href": "graphics-guide.html#highlighting",
    "title": "R visualization",
    "section": "Highlighting",
    "text": "Highlighting\n\nlibrary(gghighlight) enables the intuitive highlighting of ggplot2 plots. gghighlight modifies existing ggplot2 objects, so no other code should change. All of the highlighting is handled by the function gghighlight(), which can handle all types of geoms.\nWarning: R will throw an error if too many colors are highlighted because of the design of urbnthemes. Simply decrease the number of highlighted geoms to solve this issue.\nThere are two main ways to highlight.\n\nThreshold\nThe first way to highlight is with a threshold. Add a logical test to gghighlight() to describe which lines should be highlighted. Here, lines with maximum change in per-capita Gross Domestic Product greater than $35,000 are highlighted by gghighlight(max(pcgpd_change) > 35000, use_direct_label = FALSE).\n\nlibrary(gghighlight)\nlibrary(gapminder)\n\ndata <- gapminder %>%\n  filter(continent %in% c(\"Europe\")) %>%\n  group_by(country) %>%\n  mutate(pcgpd_change = ifelse(year == 1952, 0, gdpPercap - lag(gdpPercap))) %>%\n  mutate(pcgpd_change = cumsum(pcgpd_change))\n  \ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country, color = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change) > 35000, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\")\n\n\n\nRank\nThe second way to highlight is by rank. Here, the countries with the first highest values for change in per-capita Gross Domestic Product are highlighted with gghighlight(max(pcgpd_change), max_highlight = 5, use_direct_label = FALSE).\n\ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country, color = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change), max_highlight = 5, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\")\n\n\n\nFaceting\ngghighlight() works well with ggplot2’s faceting system.\n\ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change), max_highlight = 4, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\") +\n  facet_wrap(~ country) +\n  theme(panel.spacing = unit(20L, \"pt\"))"
  },
  {
    "objectID": "graphics-guide.html#text-and-annotation",
    "href": "graphics-guide.html#text-and-annotation",
    "title": "R visualization",
    "section": "Text and Annotation",
    "text": "Text and Annotation\n\nSeveral functions can be used to annotate, label, and highlight different parts of plots. geom_text() and geom_text_repel() both display variables from data frames. annotate(), which has several different uses, displays variables and values included in the function call.\n\ngeom_text()\ngeom_text() turns text variables in data sets into geometric objects. This is useful for labeling data in plots. Both functions need x values and y values to determine placement on the coordinate plane, and a text vector of labels.\nThis can be used to label geom_bar().\n\ndiamonds %>%\n  group_by(cut) %>%\n  summarize(price = mean(price)) %>%\n  ggplot(aes(cut, price)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = scales::dollar(price)), vjust = -1) +\n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2)),\n                                     labels = scales::dollar) +\n  labs(title = \"Average Diamond Price by Diamond Cut\",\n       x = \"Cut\",\n       y = \"Price\") +\n  remove_ticks()\n\nIt can also be used to label points in a scatter plot.\nIt’s rarely useful to label every point in a scatter plot. Use filter() to create a second data set that is subsetted and pass it into the labelling function.\n\nlabels <- mtcars %>%\n    rownames_to_column(\"model\") %>%\n    filter(model %in% c(\"Toyota Corolla\", \"Merc 240D\", \"Datsun 710\"))\n\nmtcars %>%\n    ggplot() +\n    geom_point(mapping = aes(x = wt, y = mpg)) +\n    geom_text(data = labels, mapping = aes(x = wt, y = mpg, label = model), nudge_x = 0.38) +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                                     limits = c(0, 6)) + \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                                     limits = c(0, 40)) +  \n  labs(x = \"Weight (Tons)\",\n       y = \"Miles per gallon (MPG)\") +\n  scatter_grid()\n\nText too often overlaps with other text or geoms when using geom_text(). library(ggrepel) is a library(ggplot2) add-on that automatically positions text so it doesn’t overlap with geoms or other text. To add this functionality, install and load library(ggrepel) and then use geom_text_repel() with the same syntax as geom_text().\n\n\ngeom_text_repel()\n\nlibrary(ggrepel)\n\nlabels <- mtcars %>%\n    rownames_to_column(\"model\") %>%\n    top_n(5, mpg)\n\nmtcars %>%\n    ggplot(mapping = aes(x = wt, y = mpg)) +\n    geom_point() +\n    geom_text_repel(data = labels, \n                    mapping = aes(label = model), \n                    nudge_x = 0.38) +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                                     limits = c(0, 6)) + \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                                     limits = c(0, 40)) +  \n  labs(x = \"Weight (Tons)\",\n       y = \"Miles per gallon (MPG)\") +\n  scatter_grid()\n\n\n\nannotate()\nannotate() doesn’t use data frames. Instead, it takes values for x = and y =. It can add text, rectangles, segments, and pointrange.\n\nmsleep %>%\n  filter(bodywt <= 1000) %>%\n  ggplot(aes(bodywt, sleep_total)) +\n  geom_point() +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                                     limits = c(-10, 1000),\n                                     labels = scales::comma) + \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                                     limits = c(0, 25)) +  \n  annotate(\"text\", x = 500, y = 12, label = \"These data suggest that heavy \\n animals sleep less than light animals\") +\n  labs(x = \"Body weight (pounds)\",\n       y = \"Sleep time (hours)\") +\n  scatter_grid()  \n\n\nlibrary(AmesHousing)\n\names <- make_ames()\n\names %>%\n  mutate(square_footage = Total_Bsmt_SF - Bsmt_Unf_SF + First_Flr_SF + Second_Flr_SF) %>%\n  mutate(Sale_Price = Sale_Price / 1000) %>%  \n  ggplot(aes(square_footage, Sale_Price)) +\n  geom_point(alpha = 0.2) +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                                     limits = c(-10, 12000),\n                                     labels = scales::comma) + \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)),\n                                     limits = c(0, 800),\n                                     labels = scales::dollar) +  \n  annotate(\"rect\", xmin = 6800, xmax = 11500, ymin = 145, ymax = 210, alpha = 0.1) +\n  annotate(\"text\", x = 8750, y = 230, label = \"Unfinished homes\") +\n  labs(x = \"Square footage\", \n       y = \"Sale price (thousands)\") +\n  scatter_grid()"
  },
  {
    "objectID": "graphics-guide.html#layered-geoms",
    "href": "graphics-guide.html#layered-geoms",
    "title": "R visualization",
    "section": "Layered Geoms",
    "text": "Layered Geoms\n\nGeoms can be layered in ggplot2. This is useful for design and analysis.\nIt is often useful to add points to line plots with a small number of values across the x-axis. This example from R for Data Science shows how changing the line to grey can be appealing.\n\nDesign\n\nBefore\n\ntable1 %>%\n    ggplot(aes(x = year, y = cases)) +\n        geom_line(aes(color = country)) +\n        geom_point(aes(color = country)) +\n        scale_y_continuous(expand = expand_scale(mult = c(0, 0.2)), \n                           labels = scales::comma) +\n        scale_x_continuous(breaks = c(1999, 2000)) +\n        labs(title = \"Changes in Tuberculosis Cases in Three Countries\")\n\n\n\nAfter\n\ntable1 %>%\n    ggplot(aes(year, cases)) +\n        geom_line(aes(group = country), color = \"grey50\") +\n        geom_point(aes(color = country)) +\n        scale_y_continuous(expand = expand_scale(mult = c(0, 0.2)), \n                           labels = scales::comma) +\n        scale_x_continuous(breaks = c(1999, 2000)) +\n        labs(title = \"Changes in Tuberculosis Cases in Three Countries\")\n\nLayering geoms is also useful for adding trend lines and centroids to scatter plots.\n\n# Simple line\n# Regression model\n# Centroids\n\n\n\n\nCentroids\n\nmpg_summary <- mpg %>%\n    group_by(cyl) %>%\n    summarize(displ = mean(displ), cty = mean(cty))\n\nmpg %>%\n    ggplot() +\n    geom_point(aes(x = displ, y = cty, color = factor(cyl)), alpha = 0.5) +\n    geom_point(data = mpg_summary, aes(x = displ, y = cty), size = 5, color = \"#ec008b\") +\n    geom_text(data = mpg_summary, aes(x = displ, y = cty, label = cyl)) +\n  scale_x_continuous(expand = expand_scale(mult = c(0, 0.002)), \n                     limits = c(0, 8)) +  \n  scale_y_continuous(expand = expand_scale(mult = c(0, 0)), \n                     limits = c(0, 40)) +\n    labs(x = \"Displacement\",\n         y = \"City MPG\") +\n  scatter_grid()"
  },
  {
    "objectID": "graphics-guide.html#saving-plots",
    "href": "graphics-guide.html#saving-plots",
    "title": "R visualization",
    "section": "Saving Plots",
    "text": "Saving Plots\n\nggsave() exports ggplot2 plots. The function can be used in two ways. If plot = isn’t specified in the function call, then ggsave() automatically saves the plot that was last displayed in the Viewer window. Second, if plot = is specified, then ggsave() saves the specified plot. ggsave() guesses the type of graphics device to use in export (.png, .pdf, .svg, etc.) from the file extension in the filename.\nmtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.png\")\n\nplot2 <- mtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.png\", plot = plot2)\nExported plots rarely look identical to the plots that show up in the Viewer window in RStudio because the overall size and aspect ratio of the Viewer is often different than the defaults for ggsave(). Specific sizes, aspect ratios, and resolutions can be controlled with arguments in ggsave(). RStudio has a useful cheatsheet called “How Big is Your Graph?” that should help with choosing the best size, aspect ratio, and resolution.\nFonts are not embedded in PDFs by default. To embed fonts in PDFs, include device = cairo_pdf in ggsave().\nplot <- mtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.pdf\", plot = plot2, width = 6.5, height = 4, device = cairo_pdf)\n\nPalettes\nurbnthemes contains many quick-access color palettes from the Urban Institute Data Visualization Style Guide. These palettes can be used to quickly overwrite default color palettes from urbnthemes.\n\npalette_urbn_main is the eight color discrete palette of the Urban Institute with cyan, yellow, black, gray, magenta, green, space gray, and red.\npalette_urbn_diverging is an eight color diverging palette.\npalette_urbn_quintile is a five color blue palette that is good for quintiles.\npalette_urbn_politics is a two color palette with blue for Democrats and red for Republicans.\n\nThere are seven palettes that are continuous palettes of the seven unique colors in the discrete Urban Institute color palette:\n\npalette_urbn_cyan\npalette_urbn_gray\npalette_urbn_yellow\npalette_urbn_magenta\npalette_urbn_green\npalette_urbn_spacegray\npalette_urbn_red\n\nUse view_palette() to see the palette:\n\nview_palette(palette_urbn_magenta)\n\nThe vectors can be subset using base R syntax. This allows for the quick selection of specific colors from a palette.\n\npalette_urbn_main[1:4]\n\n\npalette_urbn_spacegray[1:5]\n\n\n\nUtility functions\nlibrary(urbnthemes) contains four functions that are helpful with managing font instalations:\n\nlato_test()\nlato_install()\nfontawesome_test()\nfontawesome_install()"
  },
  {
    "objectID": "graphics-guide.html#bibliography-and-session-information",
    "href": "graphics-guide.html#bibliography-and-session-information",
    "title": "R visualization",
    "section": "Bibliography and Session Information",
    "text": "Bibliography and Session Information\n\nNote: Examples present in this document by Aaron Williams were created during personal time.\nBob Rudis and Dave Gandy (2017). waffle: Create Waffle Chart Visualizations in R. R package version 0.7.0. https://CRAN.R-project.org/package=waffle\nChester Ismay and Jennifer Chunn (2017). fivethirtyeight: Data and Code Behind the Stories and Interactives at ‘FiveThirtyEight’. R package version 0.3.0. https://CRAN.R-project.org/package=fivethirtyeight\nHadley Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2009.\nHadley Wickham (2017). tidyverse: Easily Install and Load the ‘Tidyverse’. R package version 1.2.1. https://CRAN.R-project.org/package=tidyverse\nHadley Wickham (2017). forcats: Tools for Working with Categorical Variables (Factors). R package version 0.2.0. https://CRAN.R-project.org/package=forcats\nJennifer Bryan (2017). gapminder: Data from Gapminder. R package version 0.3.0. https://CRAN.R-project.org/package=gapminder\nKamil Slowikowski (2017). ggrepel: Repulsive Text and Label Geoms for ‘ggplot2’. R package version 0.7.0. https://CRAN.R-project.org/package=ggrepel\nMax Kuhn (2017). AmesHousing: The Ames Iowa Housing Data. R package version 0.0.3. https://CRAN.R-project.org/package=AmesHousing\nPeter Kampstra (2008). Beanplot: A Boxplot Alternative for Visual Comparison of Distributions, Journal of Statistical Software, 2008. https://www.jstatsoft.org/article/view/v028c01\nR Core Team (2017). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/.\nWinston Chang, (2014). extrafont: Tools for using fonts. R package version 0.17. https://CRAN.R-project.org/package=extrafont\nYihui Xie (2018). knitr: A General-Purpose Package for Dynamic Report Generation in R. R package version 1.19.\n\nsessionInfo()\n\nR version 4.2.1 (2022-06-23 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 22621)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_United Kingdom.utf8 \n[2] LC_CTYPE=English_United Kingdom.utf8   \n[3] LC_MONETARY=English_United Kingdom.utf8\n[4] LC_NUMERIC=C                           \n[5] LC_TIME=English_United Kingdom.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] gghighlight_0.4.0 ggtext_0.1.2      showtext_0.9-5    showtextdb_3.0   \n [5] sysfonts_0.8.8    forcats_1.0.0     stringr_1.5.0     dplyr_1.1.0      \n [9] purrr_1.0.1       readr_2.1.3       tidyr_1.3.0       tibble_3.1.8     \n[13] ggplot2_3.4.0     tidyverse_1.3.2   knitr_1.42       \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.10         lubridate_1.9.1     assertthat_0.2.1   \n [4] digest_0.6.29       utf8_1.2.2          R6_2.5.1           \n [7] cellranger_1.1.0    backports_1.4.1     reprex_2.0.2       \n[10] evaluate_0.20       httr_1.4.4          pillar_1.8.1       \n[13] rlang_1.0.6         googlesheets4_1.0.1 readxl_1.4.1       \n[16] rstudioapi_0.14     rmarkdown_2.20      labeling_0.4.2     \n[19] googledrive_2.0.0   htmlwidgets_1.6.1   munsell_0.5.0      \n[22] gridtext_0.1.5      broom_1.0.3         compiler_4.2.1     \n[25] modelr_0.1.10       xfun_0.36           pkgconfig_2.0.3    \n[28] htmltools_0.5.4     tidyselect_1.2.0    fansi_1.0.4        \n[31] crayon_1.5.2        tzdb_0.3.0          dbplyr_2.3.0       \n[34] withr_2.5.0         grid_4.2.1          jsonlite_1.8.4     \n[37] gtable_0.3.1        lifecycle_1.0.3     DBI_1.1.3          \n[40] magrittr_2.0.3      scales_1.2.1        cli_3.4.1          \n[43] stringi_1.7.12      farver_2.1.1        fs_1.6.0           \n[46] xml2_1.3.3          ellipsis_0.3.2      generics_0.1.3     \n[49] vctrs_0.5.2         tools_4.2.1         glue_1.6.2         \n[52] hms_1.1.2           fastmap_1.1.0       yaml_2.3.7         \n[55] timechange_0.2.0    colorspace_2.1-0    gargle_1.3.0       \n[58] rvest_1.0.3         haven_2.5.1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "graphics-guide.html#general-rules",
    "href": "graphics-guide.html#general-rules",
    "title": "R visualization",
    "section": "General Rules",
    "text": "General Rules\n\nAll axes should be labelled and where possible, the values for data points should be indicated on the graph."
  },
  {
    "objectID": "brand_guide.html#graphs",
    "href": "brand_guide.html#graphs",
    "title": "Brand Guide",
    "section": "6.1 Graphs",
    "text": "6.1 Graphs\nCentury Gothic Bold, font size 12 should be used for the labels and values on the graph. All axes should be labelled and where possible, the values for data points should be indicated on the graph."
  },
  {
    "objectID": "graphics-guide.html#using-gss-theme.",
    "href": "graphics-guide.html#using-gss-theme.",
    "title": "R visualization",
    "section": "Using GSS theme.",
    "text": "Using GSS theme.\nIn the future, GSS will release it is own package for data visualizations. For now it suffices to run this code to load the all the R code to set the right defaults (colours, fonts, etc.) to create plots in the GGS theme.\n\n# load packages\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(ggtext)\nlibrary(gghighlight)\nlibrary(sysfonts)\nlibrary(showtextdb)\nlibrary(showtext)\n\n# load the font\nfont_add(\"century gothic bold\", \"Font/CenturyGothic.ttf\")\n\n# make sure ggplot recognizes the font \n# and set the font to high-res\nshowtext_auto()\nshowtext::showtext_opts(dpi = 300)\n\n# set default colour for plots with multiple categories\noptions(ggplot2.discrete.colour = c(\"#210D69\", \"#DB2E76\", \"#586889\", \"#227C42\"))\noptions(ggplot2.discrete.fill   = c(\"#210D69\", \"#DB2E76\", \"#586889\", \"#227C42\"))\n\n# set default colour for plots with a single category\nupdate_geom_defaults(\"bar\",   list(fill = \"#27A0CC\"))\nupdate_geom_defaults(\"col\",   list(fill = \"#27A0CC\"))\n\n# update the font to show in geom_text()\nupdate_geom_defaults(\"text\",   list(family = \"century gothic bold\", size = 4.5 ))\n\n# create a GGS theme based on the theme_gray()\ngssthemes<-function(){\n  theme_gray() %+replace%\n    theme(\n      text=element_text(family=\"century gothic bold\",\n                        colour=\"black\",\n                        size=10),\n      plot.margin = margin(0.5,0.3, 0.3, 0.3, \"cm\"),\n      plot.title =element_textbox_simple(family=\"century gothic bold\", size=16,\n                                         lineheight=1,\n                                         margin=margin(b=10)),\n      plot.title.position=\"plot\",\n      plot.caption=element_markdown(hjust=0, color=\"gray\",\n                                    lineheight=1.5,\n                                    margin =margin(t=10)),\n      plot.caption.position=\"plot\",\n      axis.title.y=element_text(color=\"black\", angle=90, size = 10),\n      axis.title.x=element_text(color=\"black\",size = 10),\n      axis.text.x=element_text(color=\"black\", size = 10),\n      axis.text.y=element_text(color=\"black\", size = 10),\n      legend.text=element_text(color=\"black\",  size = 10),\n      panel.grid.major.y=element_line(color=\"gray\", size=0.25),\n      panel.grid.major.x=element_blank(),\n      panel.grid.minor=element_blank(),\n      panel.background=element_rect(fill=\"white\", color=NA),\n      plot.background=element_rect(fill=\"white\", color=NA),\n      legend.background=element_rect(fill=\"white\", color=NA)\n    )\n}\n\n# this will make the labels of the bar chart a bit nicer, by ending above the highest data point\nnicelimits <- function(x) {\n  range(scales::extended_breaks(only.loose = TRUE)(x))\n}"
  }
]