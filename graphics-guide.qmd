---
title: "R visualization"
---



<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato" />


```{r setup, include=FALSE}
library(knitr)
library(datasets)
library(tidyverse)
library(ggplot2)

opts_chunk$set(fig.path = "graphics-guide/www/images/")
opts_chunk$set(echo = TRUE)
opts_chunk$set(warning = FALSE)
opts_chunk$set(message = FALSE)
opts_chunk$set(fig.width = 6.5)
opts_chunk$set(fig.height = 4)
opts_chunk$set(fig.retina = 3)
options(scipen = 999)
```

R is an amazing tool for data analysis and visualization. The code on this page shows the a variety of plots using the R `ggplot2` package to display statistical outputs. All the data shown on the page is fictitious and only meant for illustrative purposes.


## Use of Fonts 

- Century Gothic Bold, font size 12 should be used for the labels and values on the graph. 

## General Rules

- All axes should be labelled and where possible, the values for data points should be indicated on the graph.
- Prevent use of grid lines whenever possible to not clutter plots
- Use line breaks in long labels
- Be conscious about the way axis are ordered. For example, order regions either from the lowest to the highest value or using the serpentine order.
- label axis appropiately


## Use of Colours

Please use the following colour schemes for different types of disaggregation.


#### Sex

```{=html}
<div class="multi-group-container">
                    <div class="color two">
                    <p style="text-align:center">Male</p>
                        <div class="swatch groupcolor male dark">
                            <div class="color-code"><br><br>Hex: #206095 <br>rgb(32, 96, 149)<br>.</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#1696d2"></rect></svg></div>
                    <div class="color two">
                        <p style="text-align: center">Female</p>
                        <div class="swatch groupcolor female dark">
                            <div class="color-code"><br><br>Hex: #F66068 <br>rgb(246, 96,104)<br>.</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#000000"></rect></svg></div>
                </div>
<br>
<br>
```
#### Locality Type

```{=html}
<div class="multi-group-container">
                    <div class="color three">
                         <p style="text-align: center">National</p>  
                        <div class="swatch groupcolor national dark">
                         <div class="color-code"><br><br>Hex: #27A0CC <br>.</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#1696d2"></rect></svg></div>
                    <div class="color three">
                        <p style="text-align: center">Urban</p>
                        <div class="swatch groupcolor urban dark">
                            <div class="color-code"><br><br>Hex: #871A5B <br>.</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#000000"></rect></svg></div>
                            <div class="color three">
                                <p style="text-align: center">Rural</p>
                        <div class="swatch groupcolor rural">
                            
                            <div class="color-code"><br><br>Hex: #22D0B6 <br>.</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#000000"></rect></svg></div>
                </div>
                
             <br>
```
<br>

#### Neutral

```{=html}
<div class="multi-group-container">

                    <div class="colour six">
                        <div class="swatch groupcolor Neutral1 dark">
                            <div class="color-code"><br>Hex: #002060</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#1696d2"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Neutral2 dark">
                            <div class="color-code"><br>Hex: #0070C0</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#d2d2d2"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Neutral3 dark">
                            <div class="color-code"><br>Hex: #00B0F0</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#000000"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Neutral4">
                            <div class="color-code"><br>Hex: #8EA9DB</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#fdbf11"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Neutral5">
                            <div class="color-code"><br>Hex: #9BC2E6</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#ec008b"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor pop1">
                            <div class="color-code"><br>Hex: #2C7FB8</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#55b748"></rect></svg></div>
                    
    </div>
    
    <br>
    <br>
```
<br>

#### Positive \~ Negative

```{=html}
<div class="multi-group-container">

                    <div class="colour six">
                        <div class="swatch groupcolor Positive1 dark">
                            <div class="color-code"><br>Hex: #38761D</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#1696d2"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Positive2 dark">
                            <div class="color-code"><br>#6AA84F</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#d2d2d2"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Positive3">
                            <div class="color-code"><br>Hex: #93C47D</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#000000"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Negative3">
                            <div class="color-code"><br>Hex: #F4CCCC</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#fdbf11"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Negative2 dark">
                            <div class="color-code"><br>Hex: #E06666</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#ec008b"></rect></svg></div>
                    <div class="colour six">
                        <div class="swatch groupcolor Negative1 dark">
                            <div class="color-code"><br>Hex: #990000</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#55b748"></rect></svg></div>
                    
    </div>
    
    <br>
    <br>
```
<br>

#### Population & Density

```{=html}
<div class="multi-group-container">

                    <div class="colour five">
                        <div class="swatch groupcolor pop1">
                            <div class="color-code"><br>#FFFFCC</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#d2d2d2"></rect></svg></div>
                    <div class="colour five">
                        <div class="swatch groupcolor pop2">
                            <div class="color-code"><br>Hex: #C7E9B4</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#000000"></rect></svg></div>
                    <div class="colour five">
                        <div class="swatch groupcolor pop3">
                            <div class="color-code"><br>Hex: #7FCDBB</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#fdbf11"></rect></svg></div>
                    <div class="colour five">
                        <div class="swatch groupcolor pop4 dark">
                            <div class="color-code"><br>Hex: #41B6C4</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#ec008b"></rect></svg></div>
                    <div class="colour five">
                        <div class="swatch groupcolor pop5 dark">
                            <div class="color-code"><br>Hex: #2C7FB8</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#55b748"></rect></svg></div>
                    
    </div>
    
    <br>
    <br>
```
<br>

#### Incidence

```{=html}
<div class="multi-group-container">

                    <div class="colour six">
                        <div class="swatch groupcolor inci1">
                            <div class="color-code"><br>#FECCCC</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#d2d2d2"></rect></svg></div>
                    
     <div class="colour six">
                        <div class="swatch groupcolor inci2">
                            <div class="color-code"><br>Hex: #FF9999</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#000000"></rect></svg></div>
                    
     <div class="colour six">
                        <div class="swatch groupcolor inci3 dark">
                            <div class="color-code"><br>Hex: #FF6666</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#fdbf11"></rect></svg></div>
                   
     <div class="colour six">
                        <div class="swatch groupcolor inci4 dark">
                            <div class="color-code"><br>Hex: #FF3333</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#ec008b"></rect></svg></div>
                   
     <div class="colour six">
                        <div class="swatch groupcolor inci5 dark">
                            <div class="color-code"><br>Hex: #CC0000</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#55b748"></rect></svg></div>
     
     <div class="colour six">
                        <div class="swatch groupcolor inci6 dark">
                            <div class="color-code"><br>Hex: #990000</div>
                        </div>
                    <svg width="30" height="30" class="print-swatch"><rect width="30" height="30" fill="#55b748"></rect></svg></div>
                    
    </div>
    <br>
```


# Using GSS theme

In the future, GSS will release it is own package for data visualizations. For now it suffices to run this code to load the all the R code to set the right defaults (colours, fonts, etc.) to create plots in the GGS theme.

```{r}
# load packages
library(ggplot2)
library(tidyverse)
library(showtext)
library(ggtext)
library(gghighlight)
library(sysfonts)
library(showtextdb)
library(showtext)

# load the font
font_add("century gothic bold", "Font/CenturyGothic.ttf")

# make sure ggplot recognizes the font 
# and set the font to high-res
showtext_auto()
showtext::showtext_opts(dpi = 300)

# set default colour for plots with multiple categories
options(ggplot2.discrete.colour = c("#210D69", "#DB2E76", "#586889", "#227C42"))
options(ggplot2.discrete.fill   = c("#210D69", "#DB2E76", "#586889", "#227C42"))

# set default colour for plots with a single category
update_geom_defaults("bar",   list(fill = "#27A0CC"))
update_geom_defaults("col",   list(fill = "#27A0CC"))

# update the font to show in geom_text()
update_geom_defaults("text",   list(family = "century gothic bold", size = 4.5 ))

# create a GGS theme based on the theme_gray()
gssthemes<-function(){
  theme_gray() %+replace%
    theme(
      text=element_text(family="century gothic bold",
                        colour="black",
                        size=10),
      plot.margin = margin(0.5,0.3, 0.3, 0.3, "cm"),
      plot.title =element_textbox_simple(family="century gothic bold", size=16,
                                         lineheight=1,
                                         margin=margin(b=10)),
      plot.title.position="plot",
      plot.caption=element_markdown(hjust=0, color="gray",
                                    lineheight=1.5,
                                    margin =margin(t=10)),
      plot.caption.position="plot",
      axis.title.y=element_text(color="black", angle=90, size = 10),
      axis.title.x=element_text(color="black",size = 10),
      axis.text.x=element_text(color="black", size = 10, vjust = 0),
      axis.text.y=element_text(color="black", size = 10, hjust = 1),
      legend.text=element_text(color="black",  size = 10),
      panel.grid.major.y=element_line(color="gray", size=0.25),
      panel.grid.major.x=element_blank(),
      panel.grid.minor=element_blank(),
      panel.background=element_rect(fill="white", color=NA),
      plot.background=element_rect(fill="white", color=NA),
      legend.background=element_rect(fill="white", color=NA)
    )
}

# this will make the labels of the bar chart a bit nicer, by ending above the highest data point
nicelimits <- function(x) {
  range(scales::extended_breaks(only.loose = TRUE)(x))
}

```

## Bar charts

A bar chart is an effective way to visually represent data that is categorical or discrete in nature for example different regions in Ghana). It is particularly useful when comparing values across different categories or groups. Bar charts are ideal for showing the distribution or frequency of data, as well as identifying trends or patterns over time. They can be used to display numerical data such as quantities, percentages, and proportions. Overall, a bar chart is appropriate when you want to easily compare different categories or groups and understand the relative differences between them.




```{r}
n_chopbars_df  <- tribble(~region_number, ~region, ~number_of_chop_bars,
                            1,"Western", 567,
                            2, "Central", 907,
                            3, "Greater Accra", 6990,
                            4, "Volta", 278,
                            5, "Eastern", 787,
                            6, "Ashanti",5621,
                            7, "Western North", 345,
                            8,	"Ahafo", 678,
                            9, "Bono",1268,
                            10,"Bono East", 1268,
                            11,"Oti",773,
                            12,"Northern", 112,
                            13,"Savannah", 1289,
                            14,"North East",378,
                            15,"Upper East",1279,
                            16,	"Upper West", 3782) 

n_chopbars_df %>%
	kable()

```


### One Color

```{r barplot-normal}

# Pipe operator to pass data frame to the next line
n_chopbars_df %>% 
  # Create a ggplot object and set the aesthetic mappings
  ggplot(mapping = aes(x = region, y = number_of_chop_bars)) +
  # Add a column chart with bars of equal width
  geom_col(width = 0.8) +
  # Apply a custom theme to the plot
  gssthemes() +
# The expand argument controls whether the range of the y-axis is expanded to include a small margin around the data. The limits argument sets the upper and lower limits of the y-axis to nicelimits, which is a function that makes sure the limits are always above the largest data point. he breaks argument sets the tick marks on the y-axis to use extended_breaks from the scales package, which generates a sequence of evenly spaced values with loose spacing.
  scale_y_continuous( expand = c( 0, 0 ),
                      limits = nicelimits,
                      breaks = scales::extended_breaks(only.loose = TRUE)) +
	# Set the scale for the x-axis with tick labels rotated by 90 degrees
  scale_x_discrete(guide = guide_axis(angle = 90)) +
	 # Add axis labels to the plot
	labs(x = NULL,
			 y = "number of chop bars")+
	# Set the coordinate system for the plot, allowing data points to be partially displayed outside of the plot area.
  coord_cartesian(clip = "off")
```

### One Color (Rotated) with labels 

This example introduces `coord_flip()` instead of `coord_cartesian()` and bring back some theme elements to draw vertical instead of horizontal grid lines. 

```{r}


# Pipe operator to pass data frame to the next line
n_chopbars_df %>% 
  # Create a ggplot object and set the aesthetic mappings
  ggplot(mapping = aes(x = region, y = number_of_chop_bars)) +
  # Add a column chart with bars of equal width
  geom_col(width = 0.8) +
	# add text to the end of the plot
	 geom_text(mapping = aes(label = number_of_chop_bars), hjust = 0) +
  # Apply a custom theme to the plot
  gssthemes() +
	# The expand argument controls whether the range of the y-axis is expanded to include a small margin around the data. 
	# The limits argument sets the upper and lower limits of the y-axis to nicelimits, which is a function that makes sure 
	# the limits are always above the largest data point. he breaks argument sets the tick marks on the y-axis to use
	# extended_breaks from the scales package, which generates a sequence of evenly spaced values with loose spacing.
  scale_y_continuous( expand = c( 0, 0 ),
                      limits = nicelimits,
                      breaks = scales::extended_breaks(only.loose = TRUE)) +
	# Add axis labels to the plot
	labs(x = NULL,
			 y = "number of chop bars")+
	# Set the coordinate system for the plot, allowing data points to be partially displayed outside of the plot area.
  coord_flip(clip = "off") +
	# change the theme a bit so that 1) the axis lines are vertical and 2) the labels are right alligend
	theme(panel.grid.major.x=element_line(color = "gray", size=0.25),
				panel.grid.major.y=element_blank(),
				axis.text.x = element_text(vjust = 0.5))
```

### One Color (Rotated) with labels and ordered

```{r barplot-rotated-ordered}

# Pipe operator to pass data frame to the next line
n_chopbars_df %>% 
  # Create a ggplot object and set the aesthetic mappings
	# use the reorder function to reorder the the bars
  ggplot(mapping = aes(x = reorder(region,number_of_chop_bars), y = number_of_chop_bars)) +
  # Add a column chart with bars of equal width
  geom_col(width = 0.8) +
	# add text to the end of the plot
	 geom_text(mapping = aes(label = number_of_chop_bars), hjust = 0) +
  # Apply a custom theme to the plot
  gssthemes() +
	# The expand argument controls whether the range of the y-axis is expanded to include a small margin around the data. 
	# The limits argument sets the upper and lower limits of the y-axis to nicelimits, which is a function that makes sure 
	# the limits are always above the largest data point. he breaks argument sets the tick marks on the y-axis to use
	# extended_breaks from the scales package, which generates a sequence of evenly spaced values with loose spacing.
  scale_y_continuous( expand = c( 0, 0 ),
                      limits = nicelimits,
                      breaks = scales::extended_breaks(only.loose = TRUE)) +
	# Add axis labels to the plot
	labs(x = NULL,
			 y = "number of chop bars")+
	# Set the coordinate system for the plot, allowing data points to be partially displayed outside of the plot area.
  coord_flip(clip = "off") +
	# change the theme a bit so that 1) the axis lines are vertical and 2) the labels are right alligend
	theme(panel.grid.major.x=element_line(color = "gray", size=0.25),
				panel.grid.major.y=element_blank(),
				axis.text.x = element_text(vjust = 0.5))
```




### Three Colors

This is identical to the previous plot except colors and a legend are added with `fill = cyl`. Turning `x` into a factor with `factor(cyl)` skips 5 and 7 on the `x-axis`. Adding `fill = cyl` without `factor()` would have created a continuous color scheme and legend.

```{r 3-color-barplot, eval = FALSE}
mtcars %>%
  mutate(cyl = factor(cyl)) %>%
  count(cyl) %>%
  ggplot(mapping = aes(x = cyl, y = n, fill = cyl)) +
  geom_col() +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
  labs(x = "Cylinders",
       y = NULL) +
  remove_ticks() +
  remove_axis() +
```

### Stacked Bar Plot

An additional aesthetic can easily be added to bar plots by adding `fill = categorical variable` to the mapping. Here, transmission type subsets each bar showing the count of cars with different numbers of cylinders.

```{r stacked-bar-plot, eval = FALSE}
mtcars %>%
  mutate(am = factor(am, labels = c("Automatic", "Manual")),
         cyl = factor(cyl)) %>%  
  group_by(am) %>%
  count(cyl) %>%
  group_by(cyl) %>%
  arrange(desc(am)) %>%
  mutate(label_height = cumsum(n)) %>%
  ggplot() +
  geom_col(mapping = aes(x = cyl, y = n, fill = am)) +
  geom_text(aes(x = cyl, y = label_height - 0.5, label = n, color = am)) +
  scale_color_manual(values = c("white", "black")) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
  labs(x = "Cylinders",
       y = NULL) +  
  remove_ticks() +
  remove_axis() +
  guides(color = FALSE)
```

### Stacked Bar Plot With Position = Fill

The previous examples used `geom_col()`, which takes a y value for bar height. This example uses `geom_bar()` which sums the values and generates a value for bar heights. In this example, `position = "fill"` in `geom_bar()` changes the y-axis from count to the proportion of each bar.

```{r stacked-bar-plot-fill, eval = FALSE}
mtcars %>%
  mutate(am = factor(am, labels = c("Automatic", "Manual")),
         cyl = factor(cyl)) %>%  
  ggplot() +
  geom_bar(mapping = aes(x = cyl, fill = am), position = "fill") +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.1)), labels = scales::percent) +
  labs(x = "Cylinders",
       y = NULL) +  
  remove_ticks() +
  guides(color = FALSE)
```



#### Lollipop plot

```{r lollipop-plot, fig.height = 5, eval = FALSE}
mtcars %>%
	rownames_to_column("model") %>%
	arrange(mpg) %>%
	mutate(model = factor(model, levels = .$model)) %>%
	ggplot(aes(mpg, model)) +
		geom_segment(aes(x = 0, xend = mpg, y = model, yend = model)) +	
		geom_point() +
		scale_x_continuous(expand = expand_scale(mult = c(0, 0)), limits = c(0, 40)) +
		labs(x = NULL, 
				 y = "Miles Per Gallon")
```

### Dumbell plot




## Scatter Plots

------------------------------------------------------------------------

### One Color Scatter Plot

Scatter plots are useful for showing relationships between two or more variables. Use `scatter_grid()` from `library(urbnthemes)` to easily add vertical grid lines for scatter plots.

```{r one-color-scatter-plot, eval = FALSE}
mtcars %>%
  ggplot(mapping = aes(x = wt, y = mpg)) +
  geom_point() +
  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), 
                     limits = c(0, 6),
                     breaks = 0:6) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), 
                     limits = c(0, 40),
                     breaks = 0:8 * 5) +
  labs(x = "Weight (thousands of pounds)",
       y = "City MPG") +
  scatter_grid()
```


### Multi Color Scatter Plot

Sometimes transparency isn't enough to bring clarity to a scatter plot with many observations. As n increases into the hundreds of thousands and even millions, `geom_hex` can be one of the best ways to display relationships between two variables.



### Scatter Plots with Varying Point Size

Weights and populations can be mapped in scatter plots to the size of the points. Here, the number of households in each state is mapped to the size of each point using `aes(size = hhpop)`. Note: `ggplot2::geom_point()` is used instead of `geom_point()`.

### Scatter Plots with Fill

A third aesthetic can be added to scatter plots. Here, color signifies the number of cylinders in each car. Before `ggplot()` is called, Cylinders is created using `library(dplyr)` and the piping operator `%>%`.

```{r filled-scatter-plot, eval = FALSE}
mtcars %>%
  mutate(cyl = paste(cyl, "cylinders")) %>%
  ggplot(aes(x = wt, y = mpg, color = cyl)) +
  geom_point() +
  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), 
                     limits = c(0, 6),
                     breaks = 0:6) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), 
                     limits = c(0, 40),
                     breaks = 0:8 * 5) +
  labs(x = "Weight (thousands of pounds)",
       y = "City MPG") +
  scatter_grid()
```


## Line Plots

------------------------------------------------------------------------

```{r line-plots, eval = FALSE}
economics %>%
  ggplot(mapping = aes(x = date, y = unemploy)) +
  geom_line() +
  scale_x_date(expand = expand_scale(mult = c(0.002, 0)), 
               breaks = "10 years",
               limits = c(as.Date("1961-01-01"), as.Date("2020-01-01")),
               date_labels = "%Y") +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), 
                     breaks = 0:4 * 4000,
                     limits = c(0, 16000),
                     labels = scales::comma) +
  labs(x = "Year", 
       y = "Number Unemployed (1,000s)")
```

### Lines Plots With Multiple Lines

```{r multiple-line-charts1, eval = FALSE}
library(gapminder)

gapminder %>%
  filter(country %in% c("Australia", "Canada", "New Zealand")) %>%
  mutate(country = factor(country, levels = c("Canada", "Australia", "New Zealand"))) %>%
  ggplot(aes(year, gdpPercap, color = country)) +
  geom_line() +
  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), 
                     breaks = c(1952 + 0:12 * 5), 
                     limits = c(1952, 2007)) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), 
                     breaks = 0:8 * 5000,
                     labels = scales::dollar, 
                     limits = c(0, 40000)) +
  labs(x = "Year",
       y = "Per capita GDP (US dollars)")
```

Plotting more than one variable can be useful for seeing the relationship of variables over time, but it takes a small amount of data munging.

This is because `ggplot2` wants data in a "long" format instead of a "wide" format for line plots with multiple lines. `gather()` and `spread()` from the `tidyr` package make switching back-and-forth between "long" and "wide" painless. Essentially, variable titles go into "key" and variable values go into "value". Then ggplot2, turns the different levels of the key variable (population, unemployment) into colors.

```{r multiple-line-charts2, eval = FALSE}
as_tibble(EuStockMarkets) %>%
	mutate(date = time(EuStockMarkets)) %>%
	gather(key = "key", value = "value", -date) %>%
	ggplot(mapping = aes(x = date, y = value, color = key)) +
	geom_line() +
  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), 
                     limits = c(1991, 1999), 
                     breaks = c(1991, 1993, 1995, 1997, 1999)) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.002)), 
                     breaks = 0:4 * 2500,
                     labels = scales::dollar, 
                     limits = c(0, 10000)) +  
	labs(x = "Date",
			 y = "Value")
```



### Histograms

Histograms divide the distribution of a variable into n equal-sized bins and then count and display the number of observations in each bin. Histograms are sensitive to bin width. As `?geom_histogram` notes, "You should always override \[the default binwidth\] value, exploring multiple widths to find the best to illustrate the stories in your data."

```{r histogram, eval = FALSE, eval = FALSE}
ggplot(data = diamonds, mapping = aes(x = depth)) + 
  geom_histogram(bins = 100) +
  scale_x_continuous(expand = expand_scale(mult = c(0.002, 0)), 
                     limits = c(0, 100)) +  
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2)), labels = scales::comma) +
  labs(x = "Depth",
       y = "Count")
```

### Boxplots

Boxplots were invented in the 1970s by John Tukey[^1]. Instead of showing the underlying data or binned counts of the underlying data, they focus on important values like the 25th percentile, median, and 75th percentile.

[^1]: Wickham, H., & Stryjewski, L. (2011). 40 years of boxplots.

```{r box-plot, eval = FALSE}
InsectSprays %>%
  ggplot(mapping =  aes(x = spray, y = count)) +
  geom_boxplot() +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2))) +
  labs(x = "Type of insect spray",
       y = "Number of dead insects") +
  remove_ticks()
```


## Area Plot

------------------------------------------------------------------------

### Stacked Area

```{r area-plot-stack, eval = FALSE}
txhousing %>%
  filter(city %in% c("Austin","Houston","Dallas","San Antonio","Fort Worth")) %>%
  group_by(city, year) %>%
  summarize(sales = sum(sales)) %>%
  ggplot(aes(x = year, y = sales, fill = city)) +
  geom_area(position = "stack") +
  scale_x_continuous(expand = expand_scale(mult = c(0, 0)),
                     limits = c(2000, 2015),
                     breaks = 2000 + 0:15) +  
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.2)), 
                     labels = scales::comma) +
  labs(x = "Year",
       y = "Home sales")
```

### Filled Area

```{r area-plot-fill, eval = FALSE}
txhousing %>%
  filter(city %in% c("Austin","Houston","Dallas","San Antonio","Fort Worth")) %>%
  group_by(city, year) %>%
  summarize(sales = sum(sales)) %>%
  ggplot(aes(x = year, y = sales, fill = city)) +
  geom_area(position = "fill") +
  scale_x_continuous(expand = expand_scale(mult = c(0, 0)),
                     limits = c(2000, 2015),
                     breaks = 2000 + 0:15) +  
  scale_y_continuous(expand = expand_scale(mult = c(0, 0.02)),
                     breaks = c(0, 0.25, 0.5, 0.75, 1),
                     labels = scales::percent) +
  labs(x = "Year",
       y = "Home sales")
```

## Heat map

------------------------------------------------------------------------

```{r heat-map, eval = FALSE}
library(fivethirtyeight)

bad_drivers %>%
  filter(state %in% c("Maine", "New Hampshire", "Vermont", "Massachusetts", "Connecticut", "New York")) %>%
  mutate(`Number of\nDrivers` = scale(num_drivers),
         `Percent\nSpeeding` = scale(perc_speeding),
         `Percent\nAlcohol` = scale(perc_alcohol),
         `Percent Not\nDistracted` = scale(perc_not_distracted),
         `Percent No\nPrevious` = scale(perc_no_previous),
         state = factor(state, levels = rev(state))
         ) %>%
  select(-insurance_premiums, -losses, -(num_drivers:losses)) %>%
  gather(`Number of\nDrivers`:`Percent No\nPrevious`, key = "variable", value = "SD's from Mean") %>%
  ggplot(aes(variable, state)) +
    geom_tile(aes(fill = `SD's from Mean`)) +
    labs(x = NULL,
         y = NULL) + 
    scale_fill_gradientn() +
    theme(legend.position = "right",
          legend.direction = "vertical",
          axis.line.x = element_blank(),
          panel.grid.major.y = element_blank()) +
  remove_ticks()
#https://learnr.wordpress.com/2010/01/26/ggplot2-quick-heatmap-plotting/
```

## Faceting and Small Multiples

------------------------------------------------------------------------

### facet_wrap()

R's faceting system is a powerful way to make "small multiples".

Some edits to the theme may be necessary depending upon how many rows and columns are in the plot.

```{r small-multiples, fig.height=2, eval = FALSE}
diamonds %>%
  ggplot(mapping = aes(x = carat, y = price)) +
  geom_point(alpha = 0.05) +
  facet_wrap(~cut, ncol = 5) +
  scale_x_continuous(expand = expand_scale(mult = c(0, 0)),
                     limits = c(0, 6)) +
  scale_y_continuous(expand = expand_scale(mult = c(0, 0)),
                     limits = c(0, 20000), 
                     labels = scales::dollar) +
  labs(x = "Carat",
       y = "Price") +
  scatter_grid()
```

### facet_grid()

```{r faceting, fig.height=7, eval = FALSE}
diamonds %>%
  filter(color %in% c("D", "E", "F", "G")) %>%
  ggplot(mapping = aes(x = carat, y = price)) +
  geom_point(alpha = 0.05) +
  facet_grid(color ~ cut) +
  scale_x_continuous(expand = expand_scale(mult = c(0, 0)),
                     limits = c(0, 4)) +  
  scale_y_continuous(expand = expand_scale(mult = c(0, 0)),
                     limits = c(0, 20000), 
                     labels = scales::dollar) +
  labs(x = "Carat",
       y = "Price") +
  theme(panel.spacing = unit(20L, "pt")) +
  scatter_grid()
```



## References and Resources

------------------------------------------------------------------------

*Note:* Examples present in [this document](https://awunderground.github.io/ggplot2-themes/) by Aaron Williams were created during personal time.


```{r System Info and Package Versioning}
sessionInfo()
```
